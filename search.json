[{"path":"https://lmterryn.github.io/ITSMe/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 ITSMe authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"goal","dir":"Articles","previous_headings":"","what":"Goal","title":"ITSMe","text":"goal ITSMe (Individual Tree Structural Metrics) R package provide easy use functions quickly obtain structural metrics individual tree point clouds respective TreeQSMs.","code":""},{"path":[]},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"overview","dir":"Articles","previous_headings":"Point cloud based metrics","what":"Overview","title":"ITSMe","text":"overview basic structural metrics can measured individual tree point cloud ITSMe package:","code":""},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"tree-point-cloud-requirements","dir":"Articles","previous_headings":"Point cloud based metrics","what":"Tree point cloud requirements","title":"ITSMe","text":"tree point cloud based functions developed point clouds acquired TLS. can also used tree point clouds obtained LiDAR platforms (e.g. MLS, UAV-LS). Keep mind accuracy metric measurements depend quality data. Make sure outliers points don’t belong tree (especially near trunk) removed. Good segmentation quality leads reliable measurements. sampling point cloud required can reduce computation time big tree point clouds (sampling 2 cm suggested).","code":""},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"workflow-for-a-single-tree","dir":"Articles","previous_headings":"Point cloud based metrics","what":"Workflow for a single tree","title":"ITSMe","text":"running functions multiple tree point clouds time, advised get familiar functions input parameters running functions single tree point cloud.","code":""},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"read-the-point-cloud","dir":"Articles","previous_headings":"Point cloud based metrics > Workflow for a single tree","what":"Read the point cloud","title":"ITSMe","text":"point cloud based functions (mentioned ) need tree point cloud form data.frame columns X, Y, Z first argument. ITSMe package provides function read_tree_pc takes path tree point cloud file (txt, ply las) argument returns data.frame X, Y, Z columns.","code":"# Read the point cloud file from its' specified path tree_pc <- read_tree_pc(path = \"path/to/point/cloud.txt\")"},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"measure-position-of-tree-point-cloud","dir":"Articles","previous_headings":"Point cloud based metrics > Workflow for a single tree","what":"Measure position of tree point cloud","title":"ITSMe","text":"position tree can easily determined using tree_position_pc, determines mean X, Y Z value 100 lowest points tree point cloud. Using 100 lowest points makes possible use function also UAV-LS tree point clouds sample stem well.","code":"# Measure tree position from the tree point cloud XYZ_pos <- tree_position_pc(pc = tree_pc)"},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"measure-tree-height","dir":"Articles","previous_headings":"Point cloud based metrics > Workflow for a single tree","what":"Measure tree height","title":"ITSMe","text":"tree height can measured using tree_height_pc, calculates difference Z-value highest lowest point tree point cloud. tree_height_pc requires tree point cloud input. also optionally plots tree point cloud 2D (XZ YZ plots next ) “plot” parameter equals TRUE.  However, tree point clouds obtained example UAV-LS sample base tree sufficiently tree height underestimated. case digital terrain model (DTM) certain resolution can provided tree_height_pc function improve tree height estimation. DTM also needs supplied data.frame format columns X, Y, Z. provided resolution (r) value least resolution provided DTM.","code":"# Measure tree height from the tree point cloud H <- tree_height_pc(pc = tree_pc) # also plot the tree point cloud H_out <- tree_height_pc(pc = tree_pc, plot = TRUE) H <- H_out$h plot_tree <- H_out$plotTree # Read the DTM DTM <- read_tree_pc(path = \"path/to/dtm.txt\") # Measure tree height from the tree point cloud and DTM with resolution r H <- tree_height_pc(pc = tree_pc, dtm = DTM, r = 1.5) # also plot the tree point cloud and estimated lowest point based on DTM H_out <- tree_height_pc(pc = tree_pc, dtm = DTM, r = 1.5, plot = TRUE) H <- H_out$h plot_tree <- H_out$plot"},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"measure-dbh-andor-dab","dir":"Articles","previous_headings":"Point cloud based metrics > Workflow for a single tree","what":"Measure DBH and/or DAB","title":"ITSMe","text":"Depending trees buttressed , make choice diameter breast height (DBH) diameter buttresses (DAB). sure case tree, can check slice (circle fitting) 1.3 m diameter_slice_pc function. diameter measured circle fit slice points. function also determines functional diameter calculated diameter circle area concave hull (concavity = 4) fitted slice points. value interesting trees inherently non-circular stems. metric influenced point cloud segmentation quality (e.g. noisy points, vegetation points removed point cloud). regular non-buttressed tree:  buttressed tree: DBH measured using dbh_pc based diameter_slice_pc function slice_height 1.3 m chosen slice_thickness (default = 0.06 m). branch vegetation points present slice, lower (till 1.5 m lowest point) trunk extracted (without branch/vegetation points) fit done . dbh_pc function needs tree point cloud input. argument plot set TRUE also plots circle fitting. function also reports functional DBH (fDBH).  Generally running dbh_pc default values fine. two parameters can optimised influence trunk extraction. thresholdR2 parameter (default = 0.001) determines trunk extraction done. trunk extracted initial diameter estimation breast height results NaN, value higher 2 m, residuals higher thresholdR2 times estimated diameter estimated diameter smaller diameter estimated 0.15 m. trees non-circular stems value increased. Also smaller trees (DBH < 10 cm) tree point cloud sub-optimal co-registration scan positions, example due wind) higher value lead better results. slice_thickness parameter determines thickness slice 1.3 m default 0.06 m. tree point clouds lower point density stem (e.g. UAV-LS) increasing slice_thickness example 20 cm crucial DBH measurements. buttressed trees dbh_pc result :  case determining DAB dab_pc better option. Also trees DBH larger 2 m branches breast height function recommended (even buttresses present). dab_pc, diameter (optimal circle fitted 6mm thick horizontal slice) measured buttresses (buttresses diameter measured breast height). height horizontal slice taken (height buttresses), determined iteratively, starting breast height. average residual points fitted circle calculated. average residual exceeds value thresholdbuttress times radius, indicating non-circular (irregular) stem shape presumably buttresses, maxbuttressheight exceeded, process repeated new slice 6 mm higher previous one. maxbuttressheight exceeded iterative process restarted thresholdbuttress increased 0.0005. Also case functional DAB (fDAB) reported.  Optimise values thresholdbuttress maxbuttressheight tree default values lead desired results: reduce/increase thresholdbuttress height buttresses consistenly low/high. reduce/increase maxbuttressheight buttresses reach lower/higher heights. dbh_pc dab_pc yet work well slanted trees. Therefore advised always check plots circle fitting. tree point clouds stem tree sufficiently sampled dbh_pc dab_pc work due lack stem points.","code":"# Measure DBH from the tree point cloud and plot the circle fitting D_out <- diameter_slice_pc(   pc = tree_pc, slice_height = 1.3,   slice_thickness = 0.06, plot = TRUE ) diameter <- D_out$diameter functional_diameter <- D_out$fdiameter # Measure DBH from the tree point cloud and plot the circle fitting DBH_out <- dbh_pc(pc = tree_pc, plot = TRUE) DBH <- DBH_out$dbh # Measure DAB from the tree point cloud with default settings and plot the circle fitting DAB_out <- dab_pc(pc = tree_pc, plot = TRUE) DAB <- DAB_out$dab"},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"classify-crown-points","dir":"Articles","previous_headings":"Point cloud based metrics > Workflow for a single tree","what":"Classify crown points","title":"ITSMe","text":"basis crown metrics (e.g. projected crown area 3D alpha crown volume) classify_crown_pc used return points tree point cloud belong crown. crown defined points tree except stem points first branch. height first branch emerges iteratively determined (starting minheight) height diameter stem exceeds thresholdbranch multiplied DBH DAB.  Optimise values thresholdbranch minheight tree default values lead desired results: reduce/increase thresholdbranch crown height consistently determined high/low. reduce minheight height crown starts typically lower. increase minheight height widest part lower stem (example buttresses). non-buttressed trees, specify previosuly determined thresholdR2 slice_thickness parameters. buttressed trees, attribute buttress set TRUE previously chosen attributes thresholdbuttress maxbuttressheight can specified. recommended increase minheight buttressed trees.","code":"# Classify the tree point cloud with default settings and plot the classification results C_out <- classify_crown_pc(pc = tree_pc, plot = TRUE) crown_pc <- C_out$crownpoints plot <- C_out$plot # Classify the tree point cloud of a buttressed tree and plot the classification results C_out <- classify_crown_pc(   pc = tree_pc, minheight = 4, buttress = TRUE,   plot = TRUE ) crown_pc <- C_out$crownpoints plot <- C_out$plot"},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"measure-the-projected-area","dir":"Articles","previous_headings":"Point cloud based metrics > Workflow for a single tree","what":"Measure the projected area","title":"ITSMe","text":"projected (crown) area tree point cloud can measured projected_area_pc calculates area concave hull (based concaveman) fitted input point cloud. concavity (default=2) can chosen plot made parameter plot equals TRUE. input point cloud full tree point cloud output projected tree area. input crown point cloud (determined classify_crown_pc way) output projected crown area.","code":"# Measure the projected crown area and plot the results out <- projected_area_pc(pc = crown_pc, plot = TRUE) pca <- out$pa plot <- out$plot"},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"measure-the-3d-alpha-volume","dir":"Articles","previous_headings":"Point cloud based metrics > Workflow for a single tree","what":"Measure the 3D alpha volume","title":"ITSMe","text":"3D alpha (crown) volume tree point cloud can measured alpha_volume_pc calculates volume 3D alpha-shape (based alphashape3d) fitted (crown) points. alpha (default=1) can chosen 3D plot made parameter plot equals TRUE.","code":"# Measure the crown volume and generate 3D plot out <- alpha_volume_pc(pc = crown_pc, plot = TRUE) volume <- out$av"},{"path":[]},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"optimise-and-plot","dir":"Articles","previous_headings":"Point cloud based metrics > Workflow for multiple trees","what":"Optimise and plot","title":"ITSMe","text":"Often want check optimise performance (default) attributes used tree height, DBH, DAB, crown classification, projected area, 3D alpha volume calculation, multiple tree point clouds one folder. purpose can use plot_tree_height_pcs (based tree_height_pc), plot_circle_fit_pcs (based diameter_slice_pc), plot_dbh_fit_pcs (based dbh_pc), plot_dab_fit_pcs (based dab_pc), plot_crown_classification_pcs (based classify_crown_pc), plot_pa_pcs (based projected_area_pc), plot_av_pcs (based alpha_volume_pc) return tree height, diameter, DBH, DAB, PCA CV tree folder (PCs_path) save respective figures given output path (OUT_path). First run functions default parameters check rendered figures. Optionally change attributes functions: plot_tree_height_pcs: r (DTM provided) plot_dbh_fit_pcs: thresholdR2, slice_thickness plot_dab_fit_pcs: thresholdbuttress, maxbuttressheight classify_crown_pc: thresholdbranch, minheight plot_pca_pcs & volume_crown_pc: concavity & alpha","code":"# Tree height: # Plot the tree point clouds (check for outliers) # Specify dtm and r in case lower part of tree is not sampled Hs <- plot_tree_height_pcs(   PCs_path = \"path/to/point/clouds/folder/\",   extension = \".ply\",   OUT_path = \"path/to/output/folder/\",   dtm = DTM, r = 2 )  # DBH: # try out different thresholdR2 and slice_thickness values when default values fail DBHs <- plot_dbh_fit_pcs(   PCs_path = \"path/to/point/clouds/folder/\",   extension = \".ply\",   OUT_path = \"path/to/output/folder/\",   thresholdR2 = 0.0025, slice_thickness = 0.2 ) # DAB: # try out different values for thresholdbuttress and maxbuttressheight when default values fail DABs <- plot_dab_fit_pcs(   PCs_path = \"path/to/point/clouds/folder/\",   extension = \".las\",   OUT_path = \"path/to/output/folder/\",   thresholdbuttress = 0.002, maxbuttressheight = 9 ) # Crown classification: # For non-buttressed trees: (buttress = FALSE,) specify thresholdR2 and slice_thickness chosen in previous step # For buttressed trees: buttress = TRUE, specify thresholdbuttress and maxbuttressheight chosen in previous step # Try out different values for thresholdbranch and minheight crown_pcs <- plot_crown_classification_pcs(   PCs_path = \"path/to/point/clouds/folder/\",   extension = \".txt\",   OUT_path = \"path/to/output/folder/\",   thresholdbranch = 2, minheight = 3, buttress = TRUE,   thresholdbuttress = 0.002, maxbuttressheight = 9 ) # Projected area # Try out a different value for concavity # indicate crown = TRUE if you want to calculate projected area on the crown points only # In this case: also specify the values for the crown classification chosen in previous step PAs <- plot_pa_pcs(   PCs_path = \"path/to/point/clouds/folder/\",   extension = \".ply\",   OUT_path = \"path/to/output/folder/\", concavity = 3,   thresholdbranch = 2, minheight = 3, buttress = TRUE,   thresholdbuttress = 0.002, maxbuttressheight = 9 ) # 3D alpha volume # Try out a different value for alpha # indicate crown = TRUE if you want to calculate projected area on the crown points only # In this case: also specify the values for the crown classification chosen in previous step AVs <- plot_av_pcs(   PCs_path = \"path/to/point/clouds/folder/\",   extension = \".las\",   OUT_path = \"path/to/output/folder/\", alpha = 2,   thresholdbranch = 2, minheight = 3, buttress = TRUE,   thresholdbuttress = 0.002, maxbuttressheight = 9 )"},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"summarise","dir":"Articles","previous_headings":"Point cloud based metrics > Workflow for multiple trees","what":"Summarise","title":"ITSMe","text":"decided default/optimised attributes, can summarise point cloud structural metrics one data.frame (optionally export csv file) tree point clouds folder summary_basic_pointcloud_metrics. plot parameter TRUE, summary figure rendered tree folder. find different optimal attribute values different trees, split trees groups parameter values (e.g. buttressed non-buttressed, small big trees, species1 species2). Put groups different folders run summary function different folders separately. Afterwards outputs can combined.","code":"# Summary with default setting for non-buttressed trees and plot the summary summary <- summary_basic_pointcloud_metrics(PCs_path = \"path/to/point/clouds/folder_non-buttressed_trees/\") # Summary with default setting (except minheight and buttress) for buttressed trees summary <- summary_basic_pointcloud_metrics(   PCs_path = \"path/to/point/clouds/folder_buttressed_trees/\",   minheight = 4, buttress = TRUE )"},{"path":[]},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"overview-1","dir":"Articles","previous_headings":"QSM based metrics","what":"Overview","title":"ITSMe","text":"moment ITSMe package contains TreeQSM based structural metrics defined Åkerblom et al. (2017) Terryn et al. (2020).","code":""},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"structural-metrics-from-terryn-et-al--2020","dir":"Articles","previous_headings":"QSM based metrics > Overview","what":"Structural metrics from Terryn et al. (2020)","title":"ITSMe","text":"metrics defined Terryn et al. (2020) copied adapted Åkerblom et al. (2017) except branch angle ratio relative volume ratio new metrics. Definitions metrics can found help files functions papers Terryn et al. (2020) Åkerblom et al. (2017). Normalisation according Terryn et al. (2020) well Åkerblom et al. (2017) possible normalisation parameter included functions metrics adapted Terryn et al.  (2020). tree point cloud provided along TreeQSM functions, DBH DAB tree height values based point clouds rather QSMs. buttress parameter indicated “TRUE” DAB instead DBH used.","code":""},{"path":[]},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"read-the-treeqsm","dir":"Articles","previous_headings":"QSM based metrics > Workflow for a single tree","what":"Read the TreeQSM","title":"ITSMe","text":"TreeQSM based functions (mentioned ) need one multiple components (e.g. cylinder, branch, treedata) TreeQSM form lists fist arguments. ITSMe package provides function read_tree_qsm reads TreeQSM matlab file (.mat) returns ’ components list (optionally saves TreeQSM components global environment global = TRUE). requires path TreeQSM .mat file first argument TreeQSM version second (default = “2.4.0”) argument.","code":"# Read the TreeQSM file from its' specified path qsm <- read_tree_qsm(path = \"path/to/treeqsm.mat\") # Read the TreeQSM file of version \"2.3.0\" from its' specified path into the global environment qsm <- read_tree_qsm(   path = \"path/to/treeqsm.mat\", version = \"2.3.0\",   global = TRUE )"},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"extract-metrics-terryn-et-al--2020","dir":"Articles","previous_headings":"QSM based metrics > Workflow for a single tree","what":"Extract metrics Terryn et al. (2020)","title":"ITSMe","text":"reading TreeQSM, 17 different structural metrics listed table can easily calculated. structural metrics rely one TreeQSM components. metrics rely two TreeQSM components. metrics involve DBH/DAB /tree height, tree point cloud tree can provided input besides TreeQSM data. (general) DBH/DAB tree height accurately measured complete tree point cloud. DBH involved DAB used buttress = TRUE. Also specify attribute values determined DBH DAB measurement tree point cloud (see previous sections), Normalisation according Terryn et al. (2020) well Åkerblom et al. (2017) possible normalisation parameter included functions metrics adapted Terryn et al.  (2020).","code":"# Calculate the stem branch angle and branch angle ratio from the branch component sba <- stem_branch_angle_qsm(branch = qsm$branch) bar <- branch_angle_ratio_qsm(branch = qsm$branch) # Calculate stem branch cluster size and crown evenness from the cylinder component sbcs <- stem_branch_cluster_size_qsm(cylinder = qsm$cylinder) ce <- crown_evenness_qsm(cylinder = qsm$cylinder) # Calculate the cylinder length volume ratio from the treedata component clvr <- cylinder_length_volume_ratio_qsm(treedata = qsm$treedata) # Calculate the volume below 55 and the relative volume ratio from # the cylinder and treedata component vol_55 <- volume_below_55_qsm(cylinder = qsm$cylinder, treedata = qsm$treedata) relvol_ratio <- relative_volume_ratio_qsm(   cylinder = qsm$cylinder,   treedata = qsm$treedata ) # Calculate the shedding ratio from the branch and treedata component shed_ratio <- shedding_ratio_qsm(branch = qsm$branch, treedata = qsm$treedata) # Read the tree point cloud tree_pc <- read_tree_pc(path = \"path/to/point/cloud.txt\") # Calculate the dbh min tree radius and volume ratio using additional point cloud data dmrr <- dbh_minradius_ratio_qsm(   treedata = qsm$treedata,   cylinder = qsm$cylinder, pc = tree_pc,   thresholdR2 = 0.0025 ) dvr <- dbh_volume_ratio_qsm(   treedata = qsm$treedata, pc = tree_pc,   slice_thickness = 0.1 ) # Calculate the dbh height ratio of a buttressed tree using additional point cloud data # Specify the optimised thresholdbuttress and maxbuttressheight when needed dhr <- dbh_height_ratio_qsm(   treedata = qsm$treedata, pc = tree_pc,   buttress = TRUE, thresholdbuttress = 0.002,   maxbuttressheight = 5 ) # Calculate the crown start height, crown height and crown diameter height ratio # using additional point cloud data csh <- crown_start_height_qsm(   treedata = qsm$treedata, cylinder = qsm$cylinder,   pc = tree_pc ) ch <- crown_height_qsm(   treedata = qsm$treedata, cylinder = qsm$cylinder,   pc = tree_pc ) cdhr <- crown_diameterheight_ratio_qsm(   treedata = qsm$treedata,   cylinder = qsm$cylinder,   pc = tree_pc ) # Calculate the stem branch radius according to Åkerblom et al. (2017) sbr <- stem_branch_radius_qsm(   cylinder = qsm$cylinder, treedata = qsm$treedata,   normalisation = \"parentcylinder\" ) # Calculate the stem branch length according to Terryn et al. (2020) sbl <- stem_branch_length_qsm(   branch = qsm$branch, treedata = qsm$treedata,   normalisation = \"treeheight\" ) # Calculate the stem branch distance according to Åkerblom et al. (2017) and # using point cloud information sbd <- stem_branch_distance_qsm(   cylinder = qsm$cylinder,   treedata = qsm$treedata, normalisation = \"dbh\",   pc = tree_pc, buttress = TRUE,   thresholdbuttress = 0.002,   maxbuttressheight = 5 )"},{"path":[]},{"path":"https://lmterryn.github.io/ITSMe/articles/ITSMe.html","id":"summarise-metrics-terryn-et-al--2020","dir":"Articles","previous_headings":"QSM based metrics > Workflow for multiple trees","what":"Summarise metrics Terryn et al. (2020)","title":"ITSMe","text":"can summarise structural metrics defined Terryn et al. (2020) one data.frame (optionally export csv file) TreeQSMs folder summary_qsm_metrics. Choose normalisation stem_branch_radius_qsm, stem_branch_length_qsm, stem_branch_distance_qsm. case want use tree point cloud information, specify folder (PCs_path) extension tree point cloud files, indicate trees buttresses (buttress) specify want use non-default argument values (thresholdR2, slice_thickness, thresholdbuttress maxbuttressheight) calculate DAB (see chapter point cloud metrics). want data.frame exported csv file, specify path output folder (OUT_path). QSM files format xxx_qsm.mat (xxx tree id can consist multiple parts e.g. plot name, tree number) xxx_qsm_0.mat (0 end example n-th QSM made tree 000). qsm file can also contain multiple QSMs, case set parameter multiple = TRUE. multiple QSMs provided one tree mean standard deviation values different QSMs one tree also returned additional data.frames. provided, tree point clouds files format xxx_pc order link tree point cloud ’ respective treeQSM.","code":"# Run the summary function with default settings (without point cloud info) summary_qsm_metrics(QSMs_path = \"path/to/treeqsm/folder/\") # Run the summary function with multiple QSMs per *mat file summary_qsm_metrics(QSMs_path = \"path/to/treeqsm/folder/\", multiple = TRUE) # Run the summary function with default settings with point cloud info summary_qsm_metrics(   QSMs_path = \"path/to/treeqsms/folder/\",   PCs_path = \"path/to/point/clouds/folder/\" ) # Run the summary function with non-default settings with point cloud info summary_qsm_metrics(   QSMs_path = \"path/to/treeqsms/folder/\", version = \"2.4.0\",   sbr_normalisation = \"parentcylinder\",   sbl_normalisation = \"dbh\", sbd_normalisation = \"dbh\",   PCs_path = \"path/to/point/clouds/folder/\",   extension = \".ply\", buttress = TRUE,   thresholdbuttress = 0.002, maxbuttressheight = 5,   OUT_path = \"path/to/output/folder/\" )"},{"path":"https://lmterryn.github.io/ITSMe/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Louise Terryn. Author, maintainer. Kim Calders. Contributor.","code":""},{"path":"https://lmterryn.github.io/ITSMe/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Terryn L (2022). ITSMe: Individual Tree Structural Metrics. https://github.com/lmterryn/ITSMe, https://lmterryn.github.io/ITSMe/.","code":"@Manual{,   title = {ITSMe: Individual Tree Structural Metrics},   author = {Louise Terryn},   year = {2022},   note = {https://github.com/lmterryn/ITSMe, https://lmterryn.github.io/ITSMe/}, }"},{"path":"https://lmterryn.github.io/ITSMe/index.html","id":"goal","dir":"","previous_headings":"","what":"Goal","title":"Individual Tree Structural Metrics ","text":"goal ITSMe (Individual Tree Structural Metrics) R-package provide easy use functions quickly obtain structural metrics individual tree point clouds respective quantitative structure models (QSMs).","code":""},{"path":"https://lmterryn.github.io/ITSMe/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Individual Tree Structural Metrics ","text":"can install development version ITSMe GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"lmterryn/ITSMe\", build_vignettes = TRUE)"},{"path":"https://lmterryn.github.io/ITSMe/index.html","id":"input","dir":"","previous_headings":"","what":"Input","title":"Individual Tree Structural Metrics ","text":"functions developed tree point clouds obtained TLS QSMs obtained TreeQSM. functions can, however, also used tree point clouds obtained UAV-LS MLS. always need keep mind accuracy metric measurements depend quality data.","code":""},{"path":"https://lmterryn.github.io/ITSMe/index.html","id":"individual-tree-structural-metrics","dir":"","previous_headings":"","what":"Individual tree structural metrics","title":"Individual Tree Structural Metrics ","text":"Structural metrics can calculated ITSMe package summarised tables .","code":""},{"path":[]},{"path":"https://lmterryn.github.io/ITSMe/index.html","id":"structural-metrics-from-terryn-et-al-2020","dir":"","previous_headings":"Individual tree structural metrics","what":"Structural metrics from Terryn et al. (2020)","title":"Individual Tree Structural Metrics ","text":"metrics defined Terryn et al. (2020) adapted Akerblom et al. (2017) except branch angle ratio relative volume ratio. Definitions metrics can found help files functions papers Terryn et al. (2020) Akerblom et al. (2017). Normalisation according Terryn et al. (2020) well Akerblom et al. (2017) possible normalisation parameter included functions metrics adapted Terryn et al. (2020). tree point cloud provided along TreeQSM functions, dbh tree height values based point clouds rather QSMs. buttress parameter indicated “TRUE” diameter buttresses instead diameter breast height used.","code":""},{"path":"https://lmterryn.github.io/ITSMe/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Individual Tree Structural Metrics ","text":"complete workflows, look ITSMe vignette : Calculating diameter breast height versus diameter buttresses tree:   Calculating stem branch distance TreeQSM: Calculating summary data.frame basic structural metrics (tree position, dbh, dab, tree height, projected area, 3D alpha volume) can obtained individual tree point clouds point clouds specific folder: set plot parameter TRUE provide OUT_path, function saves summary figure tree:  Calculating summary data.frame structural metrics defined Terryn et al. (2020) TreeQSMs specific folder:","code":"vignette(\"ITSMe\") library(ITSMe) # Read the point cloud file from the Specified path to the tree point cloud file pc_tree <- read_tree_pc(path = \"path/to/point/cloud.txt\") # Use dbh_pc function with default parameters and plot the fit out_dbh <- dbh_pc(pc = pc_tree, plot = TRUE) # Access the dbh, residual and fdbh values from the output list dbh <- out_dbh$dbh residual_dbh <- out_dbh$R2 fdbh <- out_dbh$fdbh # Use dab_pc function with default parameters and plot the fit out_dab <- dab_pc(pc = pc_tree, plot = TRUE) # Access the dab, residual and fdab values from the output list ddab <- out_dab$dab residual_dab <- out_dab$R2 fdab <- out_dab$fdab library(ITSMe) # Read the TreeQSM file from the Specified path to the TreeQSM file qsm <- read_tree_qsm(path = \"path/to/QSM.mat\") # Use stem_branch_distance_qsm function sbd <- stem_branch_distance_qsm(   cylinder = qsm$cylinder,   treedata = qsm$treedata, normalisation = \"dbh\" ) # Using the point cloud information for more accurate dbh normalisation pc_tree <- read_tree_pc(path = \"path/to/point/cloud.txt\") sbd <- stem_branch_distance_qsm(   cylinder = qsm$cylinder,   treedata = qsm$treedata, normalisation = \"dbh\",   pc = pc_tree, buttress = TRUE ) library(ITSMe) # Run summary function with default parameter settings basic_summary <- summary_basic_pointcloud_metrics(   PCs_path = \"path/to/point/cloud/folder/\",   extension = \".txt\" ) library(ITSMe) # Run summary function with default parameter settings qsm_summary <- summary_qsm_metrics(   QSMs_path = \"path/to/QSM/folder/\",   version = \"2.3.0\",   PCs_path = \"path/to/point/cloud/folder/\",   extension = \".txt\" )"},{"path":"https://lmterryn.github.io/ITSMe/reference/DBH_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Diameter at breast height TreeQSM — dbh_qsm","title":"Diameter at breast height TreeQSM — dbh_qsm","text":"Extracts DBH treedata TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/DBH_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diameter at breast height TreeQSM — dbh_qsm","text":"","code":"dbh_qsm(treedata)"},{"path":"https://lmterryn.github.io/ITSMe/reference/DBH_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diameter at breast height TreeQSM — dbh_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/DBH_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diameter at breast height TreeQSM — dbh_qsm","text":"DBH TreeQSM meters.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/DBH_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diameter at breast height TreeQSM — dbh_qsm","text":"DBH calculated diameter cylinder QSM right height (cylinder 1.3 m). trunk modeled triangulation DBH calculated mean length diagonals triangulation.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/DBH_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diameter at breast height TreeQSM — dbh_qsm","text":"","code":"if (FALSE) { # Read tree qsm and extract DBH qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") dbh <- dbh_qsm(treedata = qsm$treedata) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/alpha_volume_pc.html","id":null,"dir":"Reference","previous_headings":"","what":"Alpha-shape Volume point cloud — alpha_volume_pc","title":"Alpha-shape Volume point cloud — alpha_volume_pc","text":"Returns alpha shape volume measured tree point cloud.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/alpha_volume_pc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alpha-shape Volume point cloud — alpha_volume_pc","text":"","code":"alpha_volume_pc(pc, alpha = 1, plot = FALSE)"},{"path":"https://lmterryn.github.io/ITSMe/reference/alpha_volume_pc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alpha-shape Volume point cloud — alpha_volume_pc","text":"pc point cloud data.frame columns X,Y,Z (e.g. output read_tree_pc). alpha Numeric value (default=1) alpha computation 3D alpha-shape point cloud based ashape3d. plot Logical (default=FALSE), indicates alpha-shape plotted.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/alpha_volume_pc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alpha-shape Volume point cloud — alpha_volume_pc","text":"volume point cloud (numeric value) volume 3D alpha-shape computed points point cloud. Also optionally (plot=TRUE) plots alpha-shape case returns list volume point cloud first element alphashape3d object second element. 3D plot can reconstructed using plot(output$alphashape3d).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/alpha_volume_pc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Alpha-shape Volume point cloud — alpha_volume_pc","text":"function uses ashape3d volume_ashape3d calculate volume 3D alpha-shape fitted point cloud.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/alpha_volume_pc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alpha-shape Volume point cloud — alpha_volume_pc","text":"","code":"if (FALSE) { # Read tree point cloud and calculate the volume pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") vol_tree <- alpha_volume_pc(pc = pc_tree) # and plot the 3D alpha-shape output <- alpha_volume_pc(pc = pc_tree, plot = TRUE) vol_tree <- output$volume # classify the tree point cloud and calculate the crown volume crown_pc <- classify_crown_pc(   pc, thresholdbranch, minheight, buttress,   thresholdR2, thresholdbuttress,   maxbuttressheight, FALSE ) vol_crown <- volume_crown_pc(pc = crown_pc$crownpoints, alpha = 2) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/branch_angle_ratio_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Branch angle ratio TreeQSM — branch_angle_ratio_qsm","title":"Branch angle ratio TreeQSM — branch_angle_ratio_qsm","text":"Calculates branch angle ratio TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/branch_angle_ratio_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Branch angle ratio TreeQSM — branch_angle_ratio_qsm","text":"","code":"branch_angle_ratio_qsm(branch)"},{"path":"https://lmterryn.github.io/ITSMe/reference/branch_angle_ratio_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Branch angle ratio TreeQSM — branch_angle_ratio_qsm","text":"branch Branch field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/branch_angle_ratio_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Branch angle ratio TreeQSM — branch_angle_ratio_qsm","text":"branch angle ratio. NaN branches.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/branch_angle_ratio_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Branch angle ratio TreeQSM — branch_angle_ratio_qsm","text":"branch angle ratio defined \"Ratio medians branching angles 1st order branches 2nd order branches\" (Terryn et al., 2020).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/branch_angle_ratio_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Branch angle ratio TreeQSM — branch_angle_ratio_qsm","text":"Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/branch_angle_ratio_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Branch angle ratio TreeQSM — branch_angle_ratio_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the branch angle ratio qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") br <- branch_angle_ratio_qsm(branch = qsm$branch) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/calc_r.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance from the center — calc_r","title":"Distance from the center — calc_r","text":"Calculates distance 2D point (X,Y) point cloud center (xc, yc) circle.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/calc_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance from the center — calc_r","text":"","code":"calc_r(x, y, xc, yc)"},{"path":"https://lmterryn.github.io/ITSMe/reference/calc_r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance from the center — calc_r","text":"x X values points. y Y values points. xc X-coordinate center. yc Y-coordinate center.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/calc_r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance from the center — calc_r","text":"distance 2D points center","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/calc_r.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distance from the center — calc_r","text":"Support function used determine DBH tree point cloud dbh_pc dab_pc.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/calc_r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance from the center — calc_r","text":"","code":"if (FALSE) { Ri <- calc_r(x_dbh, y_dbh, x_c, y_c) R <- mean(Ri) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/classify_crown_pc.html","id":null,"dir":"Reference","previous_headings":"","what":"Crown classification point cloud — classify_crown_pc","title":"Crown classification point cloud — classify_crown_pc","text":"Returns crown points tree point cloud.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/classify_crown_pc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crown classification point cloud — classify_crown_pc","text":"","code":"classify_crown_pc(   pc,   thresholdbranch = 1.5,   minheight = 1,   buttress = FALSE,   thresholdR2 = 0.001,   slice_thickness = 0.06,   thresholdbuttress = 0.001,   maxbuttressheight = 7,   plot = FALSE )"},{"path":"https://lmterryn.github.io/ITSMe/reference/classify_crown_pc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crown classification point cloud — classify_crown_pc","text":"pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. thresholdbranch Numeric value (default=1.5) multiplied diameter tree (calculated dbh_pc dab_pc buttress =TRUE) determines cutt-branch emerges crown begins. minheight Numeric value (default=1) minimum height crown begins. widest part buttresses buttressed trees (value 4 recommended). non-buttressed trees choose lower value (1). buttress Logical (default=FALSE), indicates trees buttresses (higher breast height). thresholdR2 Numeric value (default=0.001). Parameter dbh_pc function used calculate diameter breast height. relevant buttress == FALSE. slice_thickness Numeric value (default = 0.06). Parameter dbh_pc function used calculate diameter breast height. relevant buttress == FALSE. thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses. relevant buttress == TRUE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter breast height. relevant buttress == TRUE. plot Logical (default=FALSE), indicates classified tree plotted.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/classify_crown_pc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crown classification point cloud — classify_crown_pc","text":"Data.frame crown point cloud (part tree first branch). Also optionally (plot=TRUE) plots crown vs non-crown points case returns list crown point cloud first element plot second element.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/classify_crown_pc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Crown classification point cloud — classify_crown_pc","text":"classification based increased distance minimum maximum X (Y) coordinates tree points within horizontal slice first branch reached increasing height.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/classify_crown_pc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crown classification point cloud — classify_crown_pc","text":"","code":"if (FALSE) { # Read tree point cloud and extract the crown points pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") crown_pc <- classify_crown_pc(pc = pc_tree) # and plot the classification results output <- classify_crown_pc(pc = pc_tree, plot = TRUE) crown_pc <- output$crownpoints # with non-default settings for a buttressed tree crown_pc <- classify_crown_pc(pc = pc_tree, minheight = 4, buttress = TRUE) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_area_alpha_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Alpha crown area TreeQSM — crown_area_alpha_qsm","title":"Alpha crown area TreeQSM — crown_area_alpha_qsm","text":"Extracts alpha crown area treedata TreeQSM. calculated TreeQSM process area (m$^2$) crown's planar projection's alpha shape.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_area_alpha_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alpha crown area TreeQSM — crown_area_alpha_qsm","text":"","code":"crown_area_alpha_qsm(treedata)"},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_area_alpha_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alpha crown area TreeQSM — crown_area_alpha_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_area_alpha_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alpha crown area TreeQSM — crown_area_alpha_qsm","text":"alpha crown area TreeQSM square meters.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_area_alpha_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Alpha crown area TreeQSM — crown_area_alpha_qsm","text":"","code":"if (FALSE) { # Read tree qsm and extract tree height qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") caa <- crown_area_alpha_qsm(treedata = qsm$treedata) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_diameterheight_ratio_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Crown diameter height ratio TreeQSM — crown_diameterheight_ratio_qsm","title":"Crown diameter height ratio TreeQSM — crown_diameterheight_ratio_qsm","text":"Calculates ratio crown diameter crown height TreeQSM (Akerblom et al., 2017 & Terryn et al., 2020).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_diameterheight_ratio_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crown diameter height ratio TreeQSM — crown_diameterheight_ratio_qsm","text":"","code":"crown_diameterheight_ratio_qsm(treedata, cylinder, pc = NA)"},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_diameterheight_ratio_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crown diameter height ratio TreeQSM — crown_diameterheight_ratio_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm. cylinder Cylinder field TreeQSM returned read_tree_qsm. pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. Default NA indicates tree point cloud available.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_diameterheight_ratio_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crown diameter height ratio TreeQSM — crown_diameterheight_ratio_qsm","text":"ratio crown diameter crown height.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_diameterheight_ratio_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Crown diameter height ratio TreeQSM — crown_diameterheight_ratio_qsm","text":"crown diameter maximum radii vertical bin radius estimates calculated vertical_bin_radii_qsm. crown height vertical distance highest lowest crown cylinder obtained crown_height_qsm multiplied tree_height.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_diameterheight_ratio_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Crown diameter height ratio TreeQSM — crown_diameterheight_ratio_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_diameterheight_ratio_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crown diameter height ratio TreeQSM — crown_diameterheight_ratio_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the crown diameter height ratio qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") cdh_ratio <- crown_diameterheight_ratio_qsm(   treedata = qsm$treedata,   cylinder = qsm$cylinder ) # with point cloud data pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") cdh_ratio <- crown_diameterheight_ratio_qsm(   treedata = qsm$treedata,   cylinder = qsm$cylinder,   pc = pc_tree ) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_evenness_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Crown evenness TreeQSM — crown_evenness_qsm","title":"Crown evenness TreeQSM — crown_evenness_qsm","text":"Calculates crown evenness TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_evenness_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crown evenness TreeQSM — crown_evenness_qsm","text":"","code":"crown_evenness_qsm(cylinder)"},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_evenness_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crown evenness TreeQSM — crown_evenness_qsm","text":"cylinder Cylinder field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_evenness_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crown evenness TreeQSM — crown_evenness_qsm","text":"crown evenness.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_evenness_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Crown evenness TreeQSM — crown_evenness_qsm","text":"crown evenness defined \"crown cylinders divided 8 angular bins. Ratio minimum heights highest lowest bin.\" (Akerblom et al., 2017 & Terryn et al., 2020). Crown cylinders determined crownset_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_evenness_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Crown evenness TreeQSM — crown_evenness_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_evenness_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crown evenness TreeQSM — crown_evenness_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the crown evenness qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") ce <- crown_evenness_qsm(cylinder = qsm$cylinder) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_height_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Crown height TreeQSM — crown_height_qsm","title":"Crown height TreeQSM — crown_height_qsm","text":"Calculates crown height TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_height_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crown height TreeQSM — crown_height_qsm","text":"","code":"crown_height_qsm(treedata, cylinder, pc = NA)"},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_height_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crown height TreeQSM — crown_height_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm. cylinder Cylinder field TreeQSM returned read_tree_qsm. pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. Default NA indicates tree point cloud available.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_height_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crown height TreeQSM — crown_height_qsm","text":"crown height.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_height_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Crown height TreeQSM — crown_height_qsm","text":"crown height defined \"vertical distance highest lowest crown cylinder relative tree height\" (Akerblom et al., 2017 & Terryn et al., 2020). tree height calculated tree_height. Crown cylinders determined crownset_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_height_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Crown height TreeQSM — crown_height_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_height_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crown height TreeQSM — crown_height_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the crown height qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") ch <- crown_height_qsm(treedata = qsm$treedata, cylinder = qsm$cylinder) # with point cloud data pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") ch <- crown_height_qsm(   treedata = qsm$treedata, cylinder = qsm$cylinder,   pc = pc_tree ) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_start_height_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Crown start height TreeQSM — crown_start_height_qsm","title":"Crown start height TreeQSM — crown_start_height_qsm","text":"Calculates crown start height TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_start_height_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crown start height TreeQSM — crown_start_height_qsm","text":"","code":"crown_start_height_qsm(treedata, cylinder, pc = NA)"},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_start_height_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crown start height TreeQSM — crown_start_height_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm. cylinder Cylinder field TreeQSM returned read_tree_qsm. pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. Default NA indicates tree point cloud available.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_start_height_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crown start height TreeQSM — crown_start_height_qsm","text":"crown start height.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_start_height_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Crown start height TreeQSM — crown_start_height_qsm","text":"crown start height defined \"height first stem branch tree crown relative tree height\" (Akerblom et al., 2017 & Terryn et al., 2020). tree height calculated tree_height. Crown cylinders determined crownset_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_start_height_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Crown start height TreeQSM — crown_start_height_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crown_start_height_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crown start height TreeQSM — crown_start_height_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the crown start height qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") csh <- crown_start_height_qsm(   treedata = qsm$treedata,   cylinder = qsm$cylinder ) # with point cloud data pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") csh <- crown_start_height_qsm(   treedata = qsm$treedata,   cylinder = qsm$cylinder, pc = pc_tree ) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/crownset_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Crownset TreeQSM — crownset_qsm","title":"Crownset TreeQSM — crownset_qsm","text":"Returns indices cylinders belonging crown treeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crownset_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Crownset TreeQSM — crownset_qsm","text":"","code":"crownset_qsm(cylinder)"},{"path":"https://lmterryn.github.io/ITSMe/reference/crownset_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Crownset TreeQSM — crownset_qsm","text":"cylinder Cylinder field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crownset_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Crownset TreeQSM — crownset_qsm","text":"integer containing indices cylinders belonging crownset.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crownset_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Crownset TreeQSM — crownset_qsm","text":"crownset determined based four steps (designed exclude dead branches bottom stem) according Akerblom et al. (2017). STEP 1: Initialize crown set cylinders branching order higher three. initial set empty, minimum order lowered set becomes non-empty. STEP 2: long crown set extends, append parent cylinders crown set part stem. STEP 3: Append crown set cylinders part stem whose start point higher lowest starting point crown cylinders connected stem. STEP 4: long crown set extends, append child cylinders crown set.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crownset_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Crownset TreeQSM — crownset_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/crownset_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Crownset TreeQSM — crownset_qsm","text":"","code":"if (FALSE) { # Read tree qsm and extract the crownset qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") crown <- crownset_qsm(cylinder = qsm$cylinder) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/cylinder_length_volume_ratio_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Cylinder length-volume ratio TreeQSM — cylinder_length_volume_ratio_qsm","title":"Cylinder length-volume ratio TreeQSM — cylinder_length_volume_ratio_qsm","text":"Calculates cylinder length volume ratio TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/cylinder_length_volume_ratio_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cylinder length-volume ratio TreeQSM — cylinder_length_volume_ratio_qsm","text":"","code":"cylinder_length_volume_ratio_qsm(treedata)"},{"path":"https://lmterryn.github.io/ITSMe/reference/cylinder_length_volume_ratio_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cylinder length-volume ratio TreeQSM — cylinder_length_volume_ratio_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/cylinder_length_volume_ratio_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cylinder length-volume ratio TreeQSM — cylinder_length_volume_ratio_qsm","text":"cylinder length volume ratio meters-2.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/cylinder_length_volume_ratio_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cylinder length-volume ratio TreeQSM — cylinder_length_volume_ratio_qsm","text":"cylinder length volume ratio defined \"ratio total length volume branch cylinders\" (Akerblom et al., 2017 & Terryn et al., 2020).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/cylinder_length_volume_ratio_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cylinder length-volume ratio TreeQSM — cylinder_length_volume_ratio_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/cylinder_length_volume_ratio_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cylinder length-volume ratio TreeQSM — cylinder_length_volume_ratio_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the cylinder length volume ratio qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") clvr <- cylinder_length_volume_ratio_qsm(treedata = qsm$treedata) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/dab_pc.html","id":null,"dir":"Reference","previous_headings":"","what":"Diameter above buttresses point cloud — dab_pc","title":"Diameter above buttresses point cloud — dab_pc","text":"Returns diameter buttresses (DAB) functional diameter buttresses (fDAB) tree measured tree point cloud.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dab_pc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diameter above buttresses point cloud — dab_pc","text":"","code":"dab_pc(   pc,   thresholdbuttress = 0.001,   maxbuttressheight = 7,   slice_thickness = 0.06,   plot = FALSE )"},{"path":"https://lmterryn.github.io/ITSMe/reference/dab_pc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diameter above buttresses point cloud — dab_pc","text":"pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. thresholdbuttress Numeric value (default=0.001) multiplied radius determine stem circular irregular height slice taken. example default value 0.001: average residual (obtained initial circle fitting 1.3 m) exceeds value 0.001 times radius, indicating non-circular (irregular) stem shape presumably buttresses, circle fitting process repeated new slice 6 mm higher previous one slice buttresses reached. maxbuttressheight Numeric value (default=7) limits height diameter measured. height reached (residuals become smaller thresholdbuttress * R), thresholdbuttress value increased 0.0005 fitting starts 1.3 m. slice_thickness Numeric value (default = 0.06) determines thickness slice used measure diameter. plot Logical (default=FALSE), indicates optimised circle fitting plotted.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dab_pc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diameter above buttresses point cloud — dab_pc","text":"List diameter stem buttresses, residuals fitting, functional diameter breast height. Also optionally (plot=TRUE) plots circle fitting horizontal slice included list output.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dab_pc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diameter above buttresses point cloud — dab_pc","text":"DAB measured diameter optimal circle fitted 6mm thick horizontal slice taken buttresses using using diameter_slice_pc. least squares circle fitting algorithm applied find optimal fit. height horizontal slice taken, determined iteratively. Starting 1.27 m 1.33 m lowest point tree point cloud. average residual points fitted circle calculated. average residual exceeds value \"thresholdbuttress\" times radius, indicating non-circular (irregular) stem shape presumably buttresses, process repeated new slice 6 mm higher previous one slice buttresses reached. \"maxbuttressheight\" exceeded iterative process restarted \"thresholdbuttress\" increased 0.0005. determined height buttresses also functional diameter calculated using diameter_slice_pc.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dab_pc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diameter above buttresses point cloud — dab_pc","text":"","code":"if (FALSE) { # Read tree point cloud and calculate the DAB pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") dab <- dab_pc(pc = pc_tree) # and plot the circle fitting output <- dab_pc(pc = pc_tree, plot = TRUE) dab <- output$dab # with non-default settings dab <- dab_pc(pc = pc_tree, thresholdbuttress = 0.002, maxbuttressheight = 5) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh.html","id":null,"dir":"Reference","previous_headings":"","what":"Diameter at breast height/above buttresses — dbh","title":"Diameter at breast height/above buttresses — dbh","text":"Returns diameter breast height diameter buttresses.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diameter at breast height/above buttresses — dbh","text":"","code":"dbh(   treedata,   pc = NA,   buttress = FALSE,   thresholdR2 = 0.001,   slice_thickness = 0.06,   thresholdbuttress = 0.001,   maxbuttressheight = 7 )"},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diameter at breast height/above buttresses — dbh","text":"treedata Treedata field TreeQSM returned read_tree_qsm. pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. Default NA indicates tree point cloud available. buttress Logical (default=FALSE), indicates trees buttresses. relevant pc available. thresholdR2 Numeric value (default=0.001). Parameter dbh_pc function used calculate diameter breast height. relevant tree point cloud available buttress == FALSE. slice_thickness Numeric value (default = 0.06). Parameter dbh_pc dab_pc functions used calculate diameter breast height buttresses. relevant tree point cloud available. thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses. relevant tree point cloud available buttress == TRUE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter breast height. relevant tree point cloud available buttress == TRUE.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diameter at breast height/above buttresses — dbh","text":"dbh dab meters.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diameter at breast height/above buttresses — dbh","text":"tree point cloud available calculations based point cloud (accurate). case diameter breast height (dbh) diameter buttresses (dab) calculated dbh_pc dab_pc respectively. tree point cloud available dbh based treeQSM dbh_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diameter at breast height/above buttresses — dbh","text":"","code":"if (FALSE) { qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") DBH <- dbh(treedata = qsm$treedata) pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") DBH <- dbh(treedata = qsm$treedata, pc = pc_tree, buttress = TRUE) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_height_ratio_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"DBH-tree height ratio TreeQSM — dbh_height_ratio_qsm","title":"DBH-tree height ratio TreeQSM — dbh_height_ratio_qsm","text":"Calculates DBH-tree height ratio TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_height_ratio_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DBH-tree height ratio TreeQSM — dbh_height_ratio_qsm","text":"","code":"dbh_height_ratio_qsm(   treedata,   pc = NA,   buttress = FALSE,   thresholdR2 = 0.001,   slice_thickness = 0.06,   thresholdbuttress = 0.001,   maxbuttressheight = 7 )"},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_height_ratio_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DBH-tree height ratio TreeQSM — dbh_height_ratio_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm. pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. Default NA indicates tree point cloud available. buttress Logical (default=FALSE), indicates trees buttresses. relevant pc available. thresholdR2 Numeric value (default=0.001). Parameter dbh_pc function used calculate diameter breast height. relevant tree point cloud available buttress == FALSE. slice_thickness Numeric value (default = 0.06). Parameter dbh_pc dab_pc functions used calculate diameter breast height buttresses. relevant tree point cloud available. thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses. relevant tree point cloud available buttress == TRUE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter breast height. relevant tree point cloud available buttress == TRUE.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_height_ratio_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DBH-tree height ratio TreeQSM — dbh_height_ratio_qsm","text":"DBH divided tree height.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_height_ratio_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DBH-tree height ratio TreeQSM — dbh_height_ratio_qsm","text":"DBH tree height calculated dbh tree_height.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_height_ratio_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DBH-tree height ratio TreeQSM — dbh_height_ratio_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_height_ratio_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DBH-tree height ratio TreeQSM — dbh_height_ratio_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the dbh height ratio qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") dhr <- dbh_height_ratio_qsm(treedata = qsm$treedata) # with point cloud data pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") dhr <- dbh_height_ratio_qsm(treedata = qsm$treedata, pc = pc_tree) # for buttressed trees dhr <- dbh_height_ratio_qsm(   treedata = qsm$treedata, pc = pc_tree,   buttress = TRUE ) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_minradius_ratio_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"DBH minimum tree radius ratio TreeQSM — dbh_minradius_ratio_qsm","title":"DBH minimum tree radius ratio TreeQSM — dbh_minradius_ratio_qsm","text":"Calculates ratio dbh minimum tree radius TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_minradius_ratio_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DBH minimum tree radius ratio TreeQSM — dbh_minradius_ratio_qsm","text":"","code":"dbh_minradius_ratio_qsm(   treedata,   cylinder,   pc = NA,   buttress = FALSE,   thresholdR2 = 0.001,   slice_thickness = 0.06,   thresholdbuttress = 0.001,   maxbuttressheight = 7 )"},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_minradius_ratio_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DBH minimum tree radius ratio TreeQSM — dbh_minradius_ratio_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm. cylinder Cylinder field TreeQSM returned read_tree_qsm. pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. Default NA indicates tree point cloud available. buttress Logical (default=FALSE), indicates trees buttresses. relevant pc available. thresholdR2 Numeric value (default=0.001). Parameter dbh_pc function used calculate diameter breast height. relevant tree point cloud available buttress == FALSE. slice_thickness Numeric value (default = 0.06). Parameter dbh_pc dab_pc functions used calculate diameter breast height buttresses. relevant tree point cloud available. thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses. relevant tree point cloud available buttress == TRUE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter breast height. relevant tree point cloud available buttress == TRUE.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_minradius_ratio_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DBH minimum tree radius ratio TreeQSM — dbh_minradius_ratio_qsm","text":"ratio dbh minimum tree radius.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_minradius_ratio_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DBH minimum tree radius ratio TreeQSM — dbh_minradius_ratio_qsm","text":"ratio defined \"Ratio DBH minimum vertical bin radius estimates\" (Akerblom et al., 2017 & Terryn et al., 2020). vertical bin radius estimates calculated vertical_bin_radii_qsm. DBH calculated dbh.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_minradius_ratio_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DBH minimum tree radius ratio TreeQSM — dbh_minradius_ratio_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_minradius_ratio_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DBH minimum tree radius ratio TreeQSM — dbh_minradius_ratio_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the dbh minimum tree radius ratio qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") dmrr <- dbh_minradius_ratio_qsm(   treedata = qsm$treedata,   cylinder = qsm$cylinder ) # with point cloud data pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") dmrr <- dbh_minradius_ratio_qsm(   treedata = qsm$treedata,   cylinder = qsm$cylinder, pc = pc_tree ) # for a buttressed tree dmrr <- dbh_minradius_ratio_qsm(   treedata = qsm$treedata,   cylinder = qsm$cylinder, pc = pc_tree,   buttress = TRUE ) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_pc.html","id":null,"dir":"Reference","previous_headings":"","what":"Diameter at breast height point cloud — dbh_pc","title":"Diameter at breast height point cloud — dbh_pc","text":"Returns diameter breast height (DBH) functional diameter breast height (fDBH) tree measured tree point cloud. one stem breast height.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_pc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diameter at breast height point cloud — dbh_pc","text":"","code":"dbh_pc(pc, thresholdR2 = 0.001, slice_thickness = 0.06, plot = FALSE)"},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_pc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diameter at breast height point cloud — dbh_pc","text":"pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. thresholdR2 Numeric value (default=0.001) multiplied radius determine breast height (1.3 m lowest point point cloud) circle fit influenced branches. resulting value exceeded, lower trunk without branches extracted using extract_lower_trunk_pc. Increase thresholdR2 point cloud quality low (example, errors co-registration point clouds multi-scan due wind-effect). slice_thickness Numeric value (default = 0.06) determines thickness slice used measure diameter. plot Logical (default=FALSE), indicates optimised circle fitting plotted.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_pc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diameter at breast height point cloud — dbh_pc","text":"List diameter stem breast height, residuals fitting, functional diameter breast height. Also optionally (plot=TRUE) plots circle fitting horizontal slice included list output.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_pc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diameter at breast height point cloud — dbh_pc","text":"DBH measured diameter optimal circle fitted 6mm thick horizontal slice (1.27 m 1.33 m lowest tree point) using diameter_slice_pc. least squares circle fitting algorithm applied find optimal fit. Also functional diameter breast height (fDBH) determined using diameter_slice_pc. area concave hull (concavity 4) determined slice. area diameter determined diameter circle area. case branches foliage height, lower trunk extracted using extract_lower_trunk_pc. Wether case determined using thresholdR2 parameter.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_pc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diameter at breast height point cloud — dbh_pc","text":"","code":"if (FALSE) { # Read tree point cloud and calculate the DBH pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") dbh <- dbh_pc(pc = pc_tree) # and plot the circle fitting output <- dbh_pc(pc = pc_tree, plot = TRUE) dbh <- output$dbh }"},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_volume_ratio_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"DBH-tree volume ratio TreeQSM — dbh_volume_ratio_qsm","title":"DBH-tree volume ratio TreeQSM — dbh_volume_ratio_qsm","text":"Calculates DBH-tree volume ratio TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_volume_ratio_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DBH-tree volume ratio TreeQSM — dbh_volume_ratio_qsm","text":"","code":"dbh_volume_ratio_qsm(   treedata,   pc = NA,   buttress = FALSE,   thresholdR2 = 0.001,   slice_thickness = 0.06,   thresholdbuttress = 0.001,   maxbuttressheight = 7 )"},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_volume_ratio_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DBH-tree volume ratio TreeQSM — dbh_volume_ratio_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm. pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. Default NA indicates tree point cloud available. buttress Logical (default=FALSE), indicates trees buttresses. relevant pc available. thresholdR2 Numeric value (default=0.001). Parameter dbh_pc function used calculate diameter breast height. relevant tree point cloud available buttress == FALSE. slice_thickness Numeric value (default = 0.06). Parameter dbh_pc dab_pc functions used calculate diameter breast height buttresses. relevant tree point cloud available. thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses. relevant tree point cloud available buttress == TRUE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter breast height. relevant tree point cloud available buttress == TRUE.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_volume_ratio_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DBH-tree volume ratio TreeQSM — dbh_volume_ratio_qsm","text":"DBH divided tree volume (trunk plus branches) meters-2.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_volume_ratio_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DBH-tree volume ratio TreeQSM — dbh_volume_ratio_qsm","text":"DBH tree volume calculated dbh tree_volume_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_volume_ratio_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DBH-tree volume ratio TreeQSM — dbh_volume_ratio_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/dbh_volume_ratio_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DBH-tree volume ratio TreeQSM — dbh_volume_ratio_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the dbh volume ratio qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") dvr <- dbh_volume_ratio_qsm(treedata = qsm$treedata) # with point cloud data pc_tree <- read_tree_pc(\"path/to/point_cloud.txt\") dvr <- dbh_volume_ratio_qsm(treedata = qsm$treedata, pc = pc_tree) # for buttressed trees dvr <- dbh_volume_ratio_qsm(   treedata = qsm$treedata, pc = pc_tree,   buttress = TRUE ) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/diameter_slice_pc.html","id":null,"dir":"Reference","previous_headings":"","what":"Diameter at certain height point cloud — diameter_slice_pc","title":"Diameter at certain height point cloud — diameter_slice_pc","text":"Returns diameter certain height tree measured tree point cloud.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/diameter_slice_pc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diameter at certain height point cloud — diameter_slice_pc","text":"","code":"diameter_slice_pc(pc, slice_height = 0.1, slice_thickness = 0.06, plot = FALSE)"},{"path":"https://lmterryn.github.io/ITSMe/reference/diameter_slice_pc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diameter at certain height point cloud — diameter_slice_pc","text":"pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. slice_height Numeric value (default = 1.3) determines height lowest point point cloud diameter measured. slice_thickness Numeric value (default = 0.6) determines thickness slice used measure diameter. plot Logical (default=FALSE), indicates optimized circle fitting plotted.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/diameter_slice_pc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diameter at certain height point cloud — diameter_slice_pc","text":"list diameter specified height (numeric value), residual circle fit points, center circle fit, functional diameter calculated concave hull fitting. Also optionally (plot=TRUE) plots circle fitting horizontal slice.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/diameter_slice_pc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diameter at certain height point cloud — diameter_slice_pc","text":"diameter measured optimal circle fitted horizontal slice. least squares circle fitting algorithm applied find optimal fit. height thickness slice can specified using slice_height slice_thickness parameters. Additionally, functional diameter calculated. area concave hull (concavity 4) determined slice. area diameter determined diameter circle area. function also Support function used determine DBH tree point cloud dbh_pc.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/diameter_slice_pc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diameter at certain height point cloud — diameter_slice_pc","text":"","code":"if (FALSE) { # Read tree point cloud and calculate the diameter pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") diameter <- diameter_slice_pc(pc = pc_tree) # and plot the circle fitting output <- diameter_slice_pc(pc = pc_tree, plot = TRUE) diameter <- output$diameter residual <- output$R2 center <- out$center }"},{"path":"https://lmterryn.github.io/ITSMe/reference/extract_lower_trunk_pc.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract lower trunk point cloud — extract_lower_trunk_pc","title":"Extract lower trunk point cloud — extract_lower_trunk_pc","text":"Returns trunk points 1.5 m (lowest point tree point cloud).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/extract_lower_trunk_pc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract lower trunk point cloud — extract_lower_trunk_pc","text":"","code":"extract_lower_trunk_pc(pc, slice_thickness = 0.08)"},{"path":"https://lmterryn.github.io/ITSMe/reference/extract_lower_trunk_pc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract lower trunk point cloud — extract_lower_trunk_pc","text":"pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. slice_thickness Numeric value (default = 0.08) determines thickness slice used determine lower trunk points.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/extract_lower_trunk_pc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract lower trunk point cloud — extract_lower_trunk_pc","text":"Data.frame lower trunk point cloud (part trunk 1.5 m).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/extract_lower_trunk_pc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract lower trunk point cloud — extract_lower_trunk_pc","text":"function iteratively adds trunk points trunk point cloud starting 0.15 m lowest point tree point cloud (everything 0.15 m assumed trunk). slice many crown/branch points removed based kmeans clustering distance clusters center previous slice. Support function used determine DBH tree point cloud dbh_pc.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/extract_lower_trunk_pc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract lower trunk point cloud — extract_lower_trunk_pc","text":"","code":"if (FALSE) { # Read tree point cloud and calculate the DBH pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") trunk_pc <- extract_lower_trunk_pc(pc = pc_tree) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/f.html","id":null,"dir":"Reference","previous_headings":"","what":"Algebraic distance from the center — f","title":"Algebraic distance from the center — f","text":"Calculates algebraic distance data points mean circle centered c=(xc, yc) based calc_r.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/f.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Algebraic distance from the center — f","text":"","code":"f(c, x, y)"},{"path":"https://lmterryn.github.io/ITSMe/reference/f.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Algebraic distance from the center — f","text":"c First estimate center coordinates optimised (xc,yc). x X values points. y Y values points.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/f.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Algebraic distance from the center — f","text":"optimised returns optimised center estimate circle fitting.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/f.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Algebraic distance from the center — f","text":"Support function used determine DBH tree point cloud functions dbh_pc dab_pc.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/f.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Algebraic distance from the center — f","text":"","code":"if (FALSE) { center_estimate <- optim(par = c(x_m, y_m), fn = f, x = x_dbh, y = y_dbh) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/lm_eqn.html","id":null,"dir":"Reference","previous_headings":"","what":"Taper plot — lm_eqn","title":"Taper plot — lm_eqn","text":"Plots linear regression diameter height","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/lm_eqn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taper plot — lm_eqn","text":"","code":"lm_eqn(df)"},{"path":"https://lmterryn.github.io/ITSMe/reference/lm_eqn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taper plot — lm_eqn","text":"df Data.frame diameter height information.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/lm_eqn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taper plot — lm_eqn","text":"Plot linear regression","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/lm_eqn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Taper plot — lm_eqn","text":"","code":"if (FALSE) { taper_plot <- ggplot2::ggplot(T, ggplot2::aes(diameter, height)) + ggplot2::geom_point() + ggplot2::geom_smooth(method='lm') + ggplot2::geom_text(x = (max(T$diameter)+min(T$diameter))/2,                    y = max(T$height)-0.5, label = lm_eqn(T), parse = TRUE) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/normalize_pc.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize a tree point cloud — normalize_pc","title":"Normalize a tree point cloud — normalize_pc","text":"Normalizes tree point cloud subtracting column respective min value (e.g. X-values - min(X-values)).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/normalize_pc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize a tree point cloud — normalize_pc","text":"","code":"normalize_pc(pc)"},{"path":"https://lmterryn.github.io/ITSMe/reference/normalize_pc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize a tree point cloud — normalize_pc","text":"pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/normalize_pc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize a tree point cloud — normalize_pc","text":"Normalized point cloud data.frame columns X,Y,Z.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/normalize_pc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize a tree point cloud — normalize_pc","text":"","code":"if (FALSE) { # Read tree point cloud and normalise the point cloud pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") pc_norm <- normalize_pc(pc) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_av_pcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and save figures of alpha_volume_pc function — plot_av_pcs","title":"Calculate and save figures of alpha_volume_pc function — plot_av_pcs","text":"Calculates (crown) volume saves figures acquired running alpha_volume_pc multiple tree point clouds folder.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_av_pcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and save figures of alpha_volume_pc function — plot_av_pcs","text":"","code":"plot_av_pcs(   PCs_path,   extension = \".txt\",   OUT_path = \"./\",   alpha = 1,   crown = FALSE,   thresholdbranch = 1.5,   minheight = 1,   buttress = FALSE,   thresholdR2 = 0.001,   slice_thickness = 0.06,   thresholdbuttress = 0.001,   maxbuttressheight = 7 )"},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_av_pcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and save figures of alpha_volume_pc function — plot_av_pcs","text":"PCs_path character path folder contains tree point clouds. extension character refering file extension point cloud files (default=\".txt\"). Can \".txt\", \".ply\" \".las\". OUT_path character path folder figures saved (default = current folder). alpha Numeric value (default=1) alpha computation 3D alpha-shape tree crown based ashape3d alpha_volume_pc. crown Logical (default=FALSE), indicates volume calculated based full point clouds (crown = FALSE) crown point clouds (crown = TRUE). thresholdbranch Numeric value (default=1.5) classify_crown_pc. relevant crown == TRUE. minheight Numeric value (default=1) classify_crown_pc. default value based non-buttressed trees. Choose higher value (e.g. 4) buttressed trees. buttress Logical (default=FALSE), indicates trees buttresses (higher breast height). relevant crown == TRUE. thresholdR2 Numeric value (default=0.001). Parameter dbh_pc function used calculate diameter breast height. relevant crown == TRUE buttress == FALSE. slice_thickness Numeric value (default = 0.06). Parameter dbh_pc dab_pc functions used calculate diameter breast height buttresses. thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses used classify_crown_pc. relevant crown == TRUE buttress == FALSE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter buttresses used classify_crown_pc. relevant crown == TRUE buttress == FALSE.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_av_pcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and save figures of alpha_volume_pc function — plot_av_pcs","text":"numeric containing volume values tree point cloud. Figures saved output folder.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_av_pcs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate and save figures of alpha_volume_pc function — plot_av_pcs","text":"Uses read_tree_pc read point clouds alpha_volume_pc parameter plot = TRUE calculate volume plot 3D alpha-shape fitting. Choose crown = TRUE, want calculate plot crown volume. case crown classification done using classify_crown_pc crown points used input alpha_volume_pc. buttressed trees, first optimise thresholdbuttress, maxbuttressheight, thresholdbranch minheight parameter values using plot_dab_fit_pcs plot_crown_classification_pcs use optimised values function.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_av_pcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate and save figures of alpha_volume_pc function — plot_av_pcs","text":"","code":"if (FALSE) { # Calculate the volume with default settings and save alpha shape figures vs <- plot_av_pcs(   PCs_path = \"path/to/folder/PCs/\", extension = \".txt\",   OUT_path = \"path/to/figure/folder/\" ) # Calculate the volume with non-default settings and save alpha shape figures vs <- plot_av_pcs(   PCs_path = \"path/to/folder/PCs/\", extension = \".txt\",   OUT_path = \"path/to/figure/folder/\", alpha = 2 ) # Calculate crown volume and save alpha shape figures cvs <- plot_av_pcs(   PCs_path = \"path/to/folder/PCs/\", extension = \".txt\",   OUT_path = \"path/to/figure/folder/\", alpha = 2,   crown = TRUE, minheight = 4, buttress = TRUE ) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_circle_fit_pcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and save figures of diameter_slice_pc function — plot_circle_fit_pcs","title":"Calculate and save figures of diameter_slice_pc function — plot_circle_fit_pcs","text":"Calculates  diameter saves figures acquired running diameter_slice_pc multiple tree point clouds folder.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_circle_fit_pcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and save figures of diameter_slice_pc function — plot_circle_fit_pcs","text":"","code":"plot_circle_fit_pcs(   PCs_path,   extension = \".txt\",   slice_height = 1.3,   slice_thickness = 0.06,   OUT_path = \"./\" )"},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_circle_fit_pcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and save figures of diameter_slice_pc function — plot_circle_fit_pcs","text":"PCs_path character path folder contains tree point clouds. extension character refering file extension point cloud files (default=\".txt\"). Can \".txt\", \".ply\" \".las\". slice_height Numeric value (default = 1.3) determines height lowest point point cloud diameter measured. Parameter diameter_slice_pc function used calculate diameter stem slice. slice_thickness Numeric value (default = 0.6) determines thickness slice used measure diameter. Parameter diameter_slice_pc function used calculate diameter stem slice. OUT_path character path folder figures saved (default = current folder).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_circle_fit_pcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and save figures of diameter_slice_pc function — plot_circle_fit_pcs","text":"list first element numeric containing diameter values tree point cloud, second element residuals circle fittings, third element functional diameters. fourth element list plots. Figures also saved output folder.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_circle_fit_pcs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate and save figures of diameter_slice_pc function — plot_circle_fit_pcs","text":"Uses read_tree_pc read point clouds diameter_slice_pc parameter plot = TRUE calculate diameter plot circle fitting.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_circle_fit_pcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate and save figures of diameter_slice_pc function — plot_circle_fit_pcs","text":"","code":"if (FALSE) { # Calculate diameters at breast height (1.3m) and save circle fitting figures diam_values <- plot_circle_fit_pcs(   PCs_path = \"path/to/folder/PCs/\",   extension = \".txt\",   OUT_path = \"path/to/figure/folder/\" ) # Calculate diameters at 2.5 m with a slice of 20 cm and save the figures diam_values <- plot_circle_fit_pcs(   PCs_path = \"path/to/folder/PCs/\",   extension = \".txt\", slice_height = 2.5,   slice_thickness = 0.2,   OUT_path = \"path/to/figure/folder/\" ) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_crown_classification_pcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Save figures of classify_crown_pc function — plot_crown_classification_pcs","title":"Save figures of classify_crown_pc function — plot_crown_classification_pcs","text":"Classifies tree point clouds crown non crown points saves figures classify_crown_pc multiple tree point clouds folder. Use different values thresholdbranch minheight parameter optimise crown classification tree point clouds. Mainly minheight parameter needs optimised, small values (e.g trees buttresses higher values (e.g 4) trees buttresses. buttressed trees, first optimise thresholdbuttress maxbuttressheight parameter values using plot_dab_fit_pcs use optimised values function.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_crown_classification_pcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save figures of classify_crown_pc function — plot_crown_classification_pcs","text":"","code":"plot_crown_classification_pcs(   PCs_path,   extension = \".txt\",   OUT_path = \"./\",   thresholdbranch = 1.5,   minheight = 1,   buttress = FALSE,   thresholdR2 = 0.001,   slice_thickness = 0.06,   thresholdbuttress = 0.001,   maxbuttressheight = 7 )"},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_crown_classification_pcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save figures of classify_crown_pc function — plot_crown_classification_pcs","text":"PCs_path character path folder contains tree point clouds. extension character refering file extension point cloud files (default=\".txt\"). Can \".txt\", \".ply\" \".las\". OUT_path character path folder figures saved (default = current folder). thresholdbranch Numeric value (default=1.5) classify_crown_pc. minheight Numeric value (default=1) classify_crown_pc. default value based non-buttressed trees. Choose higher value (e.g. 4) buttressed trees. buttress Logical (default=FALSE), indicates trees buttresses (higher breast height). thresholdR2 Numeric value (default=0.001). Parameter dbh_pc function used calculate diameter breast height. relevant buttress == FALSE. slice_thickness Numeric value (default = 0.06). Parameter dbh_pc dab_pc functions used calculate diameter breast height buttresses. thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses used classify_crown_pc. relevant buttress == TRUE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter buttresses used classify_crown_pc. relevant buttress == TRUE.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_crown_classification_pcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save figures of classify_crown_pc function — plot_crown_classification_pcs","text":"Returns list plots individual plots saved output folder.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_crown_classification_pcs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save figures of classify_crown_pc function — plot_crown_classification_pcs","text":"Uses read_tree_pc read point clouds classify_crown_pc parameter plot = TRUE classify tree point cloud plot classification.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_crown_classification_pcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save figures of classify_crown_pc function — plot_crown_classification_pcs","text":"","code":"if (FALSE) { # Run the crown classification with default settings and save figures plot_crown_classification_pcs(   PCs_path = \"path/to/folder/PCs/\",   extension = \".txt\",   OUT_path = \"path/to/figure/folder/\" ) # Run the crown classification with non-default settings and save figures plot_crown_classification_pcs(   PCs_path = \"path/to/folder/PCs/\",   extension = \".txt\",   OUT_path = \"path/to/figure/folder/\",   thresholdbranch = 2, minheight = 4 ) # Run the crown classification with non-default settings and save figures # for buttressed trees plot_crown_classification_pcs(   PCs_path = \"path/to/folder/PCs/\",   extension = \".txt\",   OUT_path = \"path/to/figure/folder/\",   thresholdbranch = 2, minheight = 4,   buttress = TRUE, thresholdbuttress = 0.002,   maxbuttressheight = 5 ) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_dab_fit_pcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and save figures of dab_pc function — plot_dab_fit_pcs","title":"Calculate and save figures of dab_pc function — plot_dab_fit_pcs","text":"Calculates dab saves figures acquired running dab_pc multiple tree point clouds folder. Use different values thresholdbuttress maxbuttressheight parameter optimise dab calculation tree point clouds.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_dab_fit_pcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and save figures of dab_pc function — plot_dab_fit_pcs","text":"","code":"plot_dab_fit_pcs(   PCs_path,   extension = \".txt\",   OUT_path = \"./\",   thresholdbuttress = 0.001,   maxbuttressheight = 7,   slice_thickness = 0.06 )"},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_dab_fit_pcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and save figures of dab_pc function — plot_dab_fit_pcs","text":"PCs_path character path folder contains tree point clouds. extension character refering file extension point cloud files (default=\".txt\"). Can \".txt\", \".ply\" \".las\". OUT_path character path folder figures saved (default = current folder). thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter buttresses. slice_thickness Numeric value (default = 0.06) determines thickness slice used measure diameter.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_dab_fit_pcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and save figures of dab_pc function — plot_dab_fit_pcs","text":"list first element numeric containing dab values tree point cloud, second element residuals circle fittings, third element functional diameters. fourth element list plots. Figures also saved output folder.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_dab_fit_pcs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate and save figures of dab_pc function — plot_dab_fit_pcs","text":"Uses read_tree_pc read point clouds dab_pc parameter plot = TRUE calculate dab plot circle fitting.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_dab_fit_pcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate and save figures of dab_pc function — plot_dab_fit_pcs","text":"","code":"if (FALSE) { # Calculate DABs with default settings and save circle fitting figures dab_values <- plot_dab_fit_pcs(   PCs_path = \"path/to/folder/PCs/\",   extension = \".txt\",   OUT_path = \"path/to/figure/folder/\" ) # Calculate DABs with non-default settings and save circle fitting figures dab_values <- plot_dab_fit_pcs(   PCs_path = \"path/to/folder/PCs/\",   extension = \".txt\",   OUT_path = \"path/to/figure/folder/\",   thresholdbuttress = 0.002,   maxbuttressheight = 5 ) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_dbh_fit_pcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and save figures of dbh_pc function — plot_dbh_fit_pcs","title":"Calculate and save figures of dbh_pc function — plot_dbh_fit_pcs","text":"Calculates dbh saves figures acquired running dbh_pc multiple tree point clouds folder.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_dbh_fit_pcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and save figures of dbh_pc function — plot_dbh_fit_pcs","text":"","code":"plot_dbh_fit_pcs(   PCs_path,   extension = \".txt\",   thresholdR2 = 0.001,   slice_thickness = 0.06,   OUT_path = \"./\" )"},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_dbh_fit_pcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and save figures of dbh_pc function — plot_dbh_fit_pcs","text":"PCs_path character path folder contains tree point clouds. extension character refering file extension point cloud files (default=\".txt\"). Can \".txt\", \".ply\" \".las\". thresholdR2 Numeric value (default=0.001). Parameter dbh_pc function used calculate diameter breast height. slice_thickness Numeric value (default = 0.06). Parameter dbh_pc function used calculate diameter breast height. OUT_path character path folder figures saved (default = current folder).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_dbh_fit_pcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and save figures of dbh_pc function — plot_dbh_fit_pcs","text":"list first element numeric containing dbh values tree point cloud, second element residuals circle fittings, third element functional diameters. fourth element list plots. Figures also saved output folder.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_dbh_fit_pcs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate and save figures of dbh_pc function — plot_dbh_fit_pcs","text":"Uses read_tree_pc read point clouds dbh_pc parameter plot = TRUE calculate dbh plot circle fitting.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_dbh_fit_pcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate and save figures of dbh_pc function — plot_dbh_fit_pcs","text":"","code":"if (FALSE) { # Calculate DBHs and save circle fitting figures dbh_values <- plot_dbh_fit_pcs(   PCs_path = \"path/to/folder/PCs/\",   extension = \".txt\",   OUT_path = \"path/to/figure/folder/\" ) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_pa_pcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and save figures of projected_area_pc function — plot_pa_pcs","title":"Calculate and save figures of projected_area_pc function — plot_pa_pcs","text":"Calculates projected (crown) area saves figures acquired running projected_area_pc multiple tree point clouds folder.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_pa_pcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and save figures of projected_area_pc function — plot_pa_pcs","text":"","code":"plot_pa_pcs(   PCs_path,   extension = \".txt\",   OUT_path = \"./\",   concavity = 2,   crown = FALSE,   thresholdbranch = 1.5,   minheight = 1,   buttress = FALSE,   thresholdR2 = 0.001,   slice_thickness = 0.06,   thresholdbuttress = 0.001,   maxbuttressheight = 7 )"},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_pa_pcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and save figures of projected_area_pc function — plot_pa_pcs","text":"PCs_path character path folder contains tree point clouds. extension character refering file extension point cloud files (default=\".txt\"). Can \".txt\", \".ply\" \".las\". OUT_path character path folder figures saved (default = current folder). concavity Numeric value (default=2) concavity computation concave hull based concaveman projected_area_pc. crown Logical (default=FALSE), indicates area calculated based full point clouds (crown = FALSE) crown point clouds (crown = TRUE). thresholdbranch Numeric value (default=1.5) classify_crown_pc. relevant crown == TRUE. minheight Numeric value (default=1) classify_crown_pc. default value based non-buttressed trees. Choose higher value (e.g. 4) buttressed trees. relevant crown == TRUE. buttress Logical (default=FALSE), indicates trees buttresses (higher breast height). relevant crown == TRUE. thresholdR2 Numeric value (default=0.001). Parameter dbh_pc function used calculate diameter breast height. relevant crown == TRUE buttress == FALSE. slice_thickness Numeric value (default = 0.06). Parameter dbh_pc dab_pc functions used calculate diameter breast height buttresses. thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses used classify_crown_pc. relevant crown == TRUE buttress == FALSE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter buttresses used classify_crown_pc. relevant crown == TRUE buttress == FALSE.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_pa_pcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and save figures of projected_area_pc function — plot_pa_pcs","text":"list first element numeric containing projected area values tree point cloud. second element list plots. Figures also saved output folder.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_pa_pcs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate and save figures of projected_area_pc function — plot_pa_pcs","text":"Uses read_tree_pc read point clouds projected_area_pc parameter plot = TRUE calculate projected area plot crown projection fitting. Choose crown = TRUE, want calculate plot projected crown area. case crown classification done using classify_crown_pc crown points used input projected_area_pc. buttressed trees, first optimise thresholdbuttress, maxbuttressheight, thresholdbranch minheight parameter values using plot_dab_fit_pcs plot_crown_classification_pcs use optimised values function.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_pa_pcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate and save figures of projected_area_pc function — plot_pa_pcs","text":"","code":"if (FALSE) { # Calculate projected area with default settings and save projection figures pas <- plot_pa_pcs(   PCs_path = \"path/to/folder/PCs/\", extension = \".txt\",   OUT_path = \"path/to/figure/folder/\" ) # With non-default settings and save projection figures pas <- plot_pa_pcs(   PCs_path = \"path/to/folder/PCs/\", extension = \".txt\",   OUT_path = \"path/to/figure/folder/\", concavity = 3 ) # Calculate projected crown area and save projection figures pcas <- plot_pa_pcs(   PCs_path = \"path/to/folder/PCs/\", extension = \".txt\",   OUT_path = \"path/to/figure/folder/\", concavity = 3,   crown = TRUE, minheight = 4, buttress = TRUE ) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_tree_height_pcs.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate and save figures of tree_height_pc function — plot_tree_height_pcs","title":"Calculate and save figures of tree_height_pc function — plot_tree_height_pcs","text":"Calculates tree height saves figures acquired running tree_height_pc multiple tree point clouds folder.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_tree_height_pcs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate and save figures of tree_height_pc function — plot_tree_height_pcs","text":"","code":"plot_tree_height_pcs(   PCs_path,   extension = \".txt\",   dtm = \"NA\",   r = 5,   OUT_path = \"./\" )"},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_tree_height_pcs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate and save figures of tree_height_pc function — plot_tree_height_pcs","text":"PCs_path character path folder contains tree point clouds. extension character refering file extension point cloud files (default=\".txt\"). Can \".txt\", \".ply\" \".las\". dtm digital terrain model (default = NA), parameter tree_height_pc. r Numeric value (default=5) r, parameter tree_height_pc. relevant dtm provided. OUT_path character path folder figures saved (default = current folder).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_tree_height_pcs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate and save figures of tree_height_pc function — plot_tree_height_pcs","text":"list first element numeric containing tree height values tree point cloud. second element list plots. Figures also saved output folder.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_tree_height_pcs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate and save figures of tree_height_pc function — plot_tree_height_pcs","text":"Uses read_tree_pc read point clouds tree_height_pc parameter plot = TRUE calculate tree height plot tree point cloud.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/plot_tree_height_pcs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate and save figures of tree_height_pc function — plot_tree_height_pcs","text":"","code":"if (FALSE) { # Calculate tree height and save figures height_values <- plot_tree_height_pcs(   PCs_path = \"path/to/folder/PCs/\",   extension = \".txt\",   OUT_path = \"path/to/figure/folder/\" ) # Calculate tree height using dtm of resolution 2 and save figures dtm_df <- read_tree_pc(\"path/to/dtm.txt\") height_values <- plot_tree_height_pcs(   PCs_path = \"path/to/folder/PCs/\",   extension = \".txt\", dtm = dtm_df, r = 2,   OUT_path = \"path/to/figure/folder/\" ) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/projected_area_pc.html","id":null,"dir":"Reference","previous_headings":"","what":"Projected area point cloud — projected_area_pc","title":"Projected area point cloud — projected_area_pc","text":"Returns projected area measured point cloud.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/projected_area_pc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Projected area point cloud — projected_area_pc","text":"","code":"projected_area_pc(pc, concavity = 2, plot = FALSE)"},{"path":"https://lmterryn.github.io/ITSMe/reference/projected_area_pc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Projected area point cloud — projected_area_pc","text":"pc point cloud data.frame columns X,Y,Z (e.g. output read_tree_pc. concavity Numeric value (default=2) concavity computation concave hull based concaveman. plot Logical (default=FALSE), indicates optimised circle fitting plotted.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/projected_area_pc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Projected area point cloud — projected_area_pc","text":"projected area (numeric value) area concave hull computed points point cloud. Also optionally (plot=TRUE) plots concave hull fitting case returns list area first element plot second element.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/projected_area_pc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Projected area point cloud — projected_area_pc","text":"function uses st_area concaveman calculate area concave hull fitted provided point clouds.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/projected_area_pc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Projected area point cloud — projected_area_pc","text":"","code":"if (FALSE) { # Read tree point cloud and calculate the projected tree area pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") pta <- projected_crown_area_pc(pc = pc_tree) # and plot the concave hull fitting output <- projected_crown_area_pc(pc = pc_tree, plot = TRUE) pca <- output$pca # classify the tree point cloud and calculate the projected crown area crown_pc <- classify_crown_pc(   pc, thresholdbranch, minheight, buttress,   thresholdR2, thresholdbuttress,   maxbuttressheight, FALSE ) pca <- projected_crown_area_pc(pc = crown_pc$crownpoints) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/read_tree_pc.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a tree point cloud — read_tree_pc","title":"Read a tree point cloud — read_tree_pc","text":"Reads tree point cloud file txt, las ply format returns tree point cloud data.frame 3 columns (X,Y,Z).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/read_tree_pc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a tree point cloud — read_tree_pc","text":"","code":"read_tree_pc(path, samplefactor = 1)"},{"path":"https://lmterryn.github.io/ITSMe/reference/read_tree_pc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a tree point cloud — read_tree_pc","text":"path character path tree point cloud file. File can txt, las ply format. 3D coordinates first three columns case txt file. samplefactor numeric value ranging 0 1 (default=1). determines amount points sampled point cloud. 1 sample 100 percent points example 0.5 sample 50 percent points.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/read_tree_pc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a tree point cloud — read_tree_pc","text":"tree point cloud data.frame (nx3) X, Y, Z coordinates first, second third column respectively.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/read_tree_pc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a tree point cloud — read_tree_pc","text":"Reading txt, las ply files based fread, readTLSLAS vcgPlyRead respectively. Sampling based sample mainly useful tool reduce amount points quicker plotting.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/read_tree_pc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a tree point cloud — read_tree_pc","text":"","code":"if (FALSE) { # Read a tree point cloud file of the txt format pc_txt <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") # Read a tree point cloud file of the ply format pc_ply <- read_tree_pc(PC_path = \"path/to/point_cloud.ply\") # Read a tree point cloud file of the las format # and subsample to 20 percent of the points pc_las <- read_tree_pc(PC_path = \"path/to/point_cloud.las\", 0.2) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/read_tree_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a TreeQSM — read_tree_qsm","title":"Read a TreeQSM — read_tree_qsm","text":"Reads TreeQSM matlab file (.mat) returns ' components list optionally saves TreeQSM components global environment. multiple TreeQSMs matlab file read list qsms (list components).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/read_tree_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a TreeQSM — read_tree_qsm","text":"","code":"read_tree_qsm(path, version = \"2.4.1\", global = FALSE)"},{"path":"https://lmterryn.github.io/ITSMe/reference/read_tree_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a TreeQSM — read_tree_qsm","text":"path character path TreeQSM mat file. file contains one multiple QSM(s) produced https://github.com/InverseTampere/TreeQSM matlab. version character indicating version TreeQSM used produce TreeQSMs (Default = \"2.4.1\"). possible versions \"2.4.0\", \"2.0\", \"2.3.0\", \"2.3.1\" \"2.3.2\". global Logical (default=FALSE), indicates TreeQSM components (different qsms) read global environment.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/read_tree_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a TreeQSM — read_tree_qsm","text":"Returns list TreeQSM components (cylinder, branch, treedata triangulation) list qsms (qsm_1, qsm_2, etc) wich list components. optionally (global=TRUE) saves global environment.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/read_tree_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a TreeQSM — read_tree_qsm","text":"Initial reading .mat file uses readMat. TreeQSM versions older 2.4.0 converted 2.4.x structure, value attributes found older version set NA.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/read_tree_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read a TreeQSM — read_tree_qsm","text":"","code":"if (FALSE) { # Read a TreeQSM.mat file with default settings qsm <- read_tree_qsm(QSM_path = \"path/to/TreeQSM.mat\") cylinder_data <- qsm$cylinder # Read a TreeQSM.mat file of version 2.0 qsm <- read_tree_qsm(QSM_path = \"path/to/TreeQSM.mat\", version = \"2.0\") # Read a TreeQSM.mat file with into the global environment qsm <- read_tree_qsm(QSM_path = \"path/to/TreeQSM.mat\", global = TRUE) cylinder_data <- cylinder # Read a TreeQSM.mat file of multiple qsms qsms <- read_tree_qsm(QSM_path = \"path/to/TreeQSMs.mat\") cylinder_data_of_qsm_1 <- qsms$qsm1$cylinder }"},{"path":"https://lmterryn.github.io/ITSMe/reference/relative_volume_ratio_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Relative volume ratio TreeQSM — relative_volume_ratio_qsm","title":"Relative volume ratio TreeQSM — relative_volume_ratio_qsm","text":"Calculates relative volume ratio TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/relative_volume_ratio_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative volume ratio TreeQSM — relative_volume_ratio_qsm","text":"","code":"relative_volume_ratio_qsm(cylinder, treedata)"},{"path":"https://lmterryn.github.io/ITSMe/reference/relative_volume_ratio_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relative volume ratio TreeQSM — relative_volume_ratio_qsm","text":"cylinder Cylinder field TreeQSM returned read_tree_qsm. treedata Treedata field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/relative_volume_ratio_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Relative volume ratio TreeQSM — relative_volume_ratio_qsm","text":"relative volume ratio.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/relative_volume_ratio_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Relative volume ratio TreeQSM — relative_volume_ratio_qsm","text":"relative volume ratio defined \"Ratio percentage volume within 80 90% tree height percentage volume within 0 10% tree height\" (Terryn et al., 2020).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/relative_volume_ratio_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Relative volume ratio TreeQSM — relative_volume_ratio_qsm","text":"Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/relative_volume_ratio_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Relative volume ratio TreeQSM — relative_volume_ratio_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the relative volume ratio qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") rvr <- relative_volume_ratio_qsm(   cylinder = qsm$cylinder,   treedata = qsm$treedata ) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/shedding_ratio_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Shedding ratio TreeQSM — shedding_ratio_qsm","title":"Shedding ratio TreeQSM — shedding_ratio_qsm","text":"Calculates shedding ratio TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/shedding_ratio_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shedding ratio TreeQSM — shedding_ratio_qsm","text":"","code":"shedding_ratio_qsm(branch, cylinder, treedata)"},{"path":"https://lmterryn.github.io/ITSMe/reference/shedding_ratio_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shedding ratio TreeQSM — shedding_ratio_qsm","text":"branch Branch field TreeQSM returned read_tree_qsm. cylinder Cylinder field TreeQSM returned read_tree_qsm. treedata Treedata field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/shedding_ratio_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shedding ratio TreeQSM — shedding_ratio_qsm","text":"shedding ratio.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/shedding_ratio_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shedding ratio TreeQSM — shedding_ratio_qsm","text":"shedding ratio defined \"number stem branches without children divided number branches bottom third\" (Akerblom et al., 2017 & Terryn et al., 2020).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/shedding_ratio_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Shedding ratio TreeQSM — shedding_ratio_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/shedding_ratio_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shedding ratio TreeQSM — shedding_ratio_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the shedding ratio qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") sr <- shedding_ratio_qsm(   branch = qsm$branch, cylinder = qsm$cylinder,   treedata = qsm$treedata ) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_angle_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Stem branch angle TreeQSM — stem_branch_angle_qsm","title":"Stem branch angle TreeQSM — stem_branch_angle_qsm","text":"Calculates stem branch angle TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_angle_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stem branch angle TreeQSM — stem_branch_angle_qsm","text":"","code":"stem_branch_angle_qsm(branch)"},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_angle_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stem branch angle TreeQSM — stem_branch_angle_qsm","text":"branch Branch field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_angle_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stem branch angle TreeQSM — stem_branch_angle_qsm","text":"stem branch angle degrees. NaN stem branches.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_angle_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stem branch angle TreeQSM — stem_branch_angle_qsm","text":"stem branch angle defined \"median branching angles 1st order branches degrees. 0 upwards 180 downwards (parallel trunk)\" (Akerblom et al., 2017 & Terryn et al., 2020).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_angle_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stem branch angle TreeQSM — stem_branch_angle_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_angle_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stem branch angle TreeQSM — stem_branch_angle_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the stem branch angle qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") sba <- stem_branch_angle_qsm(branch = qsm$branch) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_cluster_size_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Stem branch cluster size TreeQSM — stem_branch_cluster_size_qsm","title":"Stem branch cluster size TreeQSM — stem_branch_cluster_size_qsm","text":"Calculates stem branch cluster size TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_cluster_size_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stem branch cluster size TreeQSM — stem_branch_cluster_size_qsm","text":"","code":"stem_branch_cluster_size_qsm(cylinder)"},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_cluster_size_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stem branch cluster size TreeQSM — stem_branch_cluster_size_qsm","text":"cylinder Cylinder field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_cluster_size_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stem branch cluster size TreeQSM — stem_branch_cluster_size_qsm","text":"stem branch cluster size. NaN stem branches.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_cluster_size_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stem branch cluster size TreeQSM — stem_branch_cluster_size_qsm","text":"stem branch cluster size defined \"average number 1st order branches inside 40cm height interval 1st order branches. branch can belong one interval\" (Akerblom et al., 2017 & Terryn et al., 2020).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_cluster_size_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stem branch cluster size TreeQSM — stem_branch_cluster_size_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_cluster_size_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stem branch cluster size TreeQSM — stem_branch_cluster_size_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the stem branch cluster size qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") sbcs <- stem_branch_cluster_size_qsm(cylinder = qsm$cylinder) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_distance_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Stem branch distance TreeQSM — stem_branch_distance_qsm","title":"Stem branch distance TreeQSM — stem_branch_distance_qsm","text":"Calculates stem branch distance TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_distance_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stem branch distance TreeQSM — stem_branch_distance_qsm","text":"","code":"stem_branch_distance_qsm(   cylinder,   treedata,   normalisation = \"no\",   pc = NA,   buttress = FALSE,   thresholdR2 = 0.001,   slice_thickness = 0.06,   thresholdbuttress = 0.001,   maxbuttressheight = 7 )"},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_distance_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stem branch distance TreeQSM — stem_branch_distance_qsm","text":"cylinder Cylinder field TreeQSM returned read_tree_qsm. treedata Treedata field TreeQSM returned read_tree_qsm. normalisation Can either \"dbh\" nothing. case \"dbh\" average distance divided DBH (Akerblom et al., 2017). pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. Default NA indicates tree point cloud available. relevant normalisation equals \"dbh\". buttress Logical (default=FALSE), indicates trees buttresses. relevant pc available normalisation equals \"dbh\". thresholdR2 Numeric value (default=0.001). Parameter dbh_pc function used calculate diameter breast height. relevant tree point cloud available buttress == FALSE. slice_thickness Numeric value (default = 0.06). Parameter dbh_pc dab_pc functions used calculate diameter breast height buttresses. relevant tree point cloud available. thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses. relevant tree point cloud available buttress == TRUE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter breast height. relevant tree point cloud available buttress == TRUE.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_distance_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stem branch distance TreeQSM — stem_branch_distance_qsm","text":"stem branch distance. Unitless normalisation, meters without normalisation. NaN stem branches.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_distance_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stem branch distance TreeQSM — stem_branch_distance_qsm","text":"stem branch distance defined \"Average distance 1st order branches computed using moving average window width 1 m. window empty average distance window set half window width. Can normalised DBH\" (Akerblom et al., 2017 & Terryn et al., 2020). something different \"dbh\" given, normalisation done. Default normalisation. DBH calculated dbh.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_distance_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stem branch distance TreeQSM — stem_branch_distance_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_distance_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stem branch distance TreeQSM — stem_branch_distance_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the stem branch distance # from Akerblom et al. (2017) qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") sbd <- stem_branch_distance_qsm(   cylinder = qsm$cylinder,   treedata = qsm$treedata,   normalisation = \"dbh\" ) # with point cloud data for buttressed trees pc <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") sbd <- stem_branch_distance_qsm(   cylinder = qsm$cylinder,   treedata = qsm$treedata,   normalisation = \"dbh\", pc = tree_pc,   buttress = TRUE ) # from Terryn et al. (2020) sbd <- stem_branch_distance_qsm(   cylinder = qsm$cylinder,   treedata = qsm$treedata,   normalisation = \"no\" ) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_length_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Stem branch length TreeQSM — stem_branch_length_qsm","title":"Stem branch length TreeQSM — stem_branch_length_qsm","text":"Calculates stem branch length TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_length_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stem branch length TreeQSM — stem_branch_length_qsm","text":"","code":"stem_branch_length_qsm(   branch,   treedata,   normalisation = \"treeheight\",   pc = NA,   buttress = FALSE,   thresholdR2 = 0.001,   slice_thickness = 0.06,   thresholdbuttress = 0.001,   maxbuttressheight = 7 )"},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_length_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stem branch length TreeQSM — stem_branch_length_qsm","text":"branch Branch field TreeQSM returned read_tree_qsm. treedata Treedata field TreeQSM returned read_tree_qsm. normalisation Can either \"dbh\" \"treeheight\". case \"dbh\" mean lengths stem branches divided DBH (Akerblom et al., 2017). case \"treeheight\" mean divided tree height (Terryn et al., 2020). something different \"dbh\" \"treeheight\" given, normalisation done. Default normalisation. pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. Default NA indicates tree point cloud available. relevant normalisation equals \"dbh\" \"treeheight\". buttress Logical (default=FALSE), indicates trees buttresses. relevant pc available normalisation equals \"dbh\". thresholdR2 Numeric value (default=0.001). Parameter dbh_pc function used calculate diameter breast height. relevant tree point cloud available buttress == FALSE. slice_thickness Numeric value (default = 0.06). Parameter dbh_pc function used calculate diameter breast height. relevant tree point cloud available buttress == FALSE. thresholdbuttress Numeric value (default=0.001). Parameter dab_pc dab_pc functions used calculate diameter breast height buttresses. relevant tree point cloud available. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter breast height. relevant tree point cloud available buttress == TRUE.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_length_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stem branch length TreeQSM — stem_branch_length_qsm","text":"stem branch length. Unitless normalisation, meters without normalisation. NaN stem branches.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_length_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stem branch length TreeQSM — stem_branch_length_qsm","text":"stem branch length defined \"average length 1st order branches. Can normalised DBH tree height\" (Akerblom et al., 2017 & Terryn et al., 2020). DBH tree height calculated dbh tree_height.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_length_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stem branch length TreeQSM — stem_branch_length_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_length_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stem branch length TreeQSM — stem_branch_length_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the stem branch radius # from Akerblom et al. (2017) qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") sbl <- stem_branch_length_qsm(   branch = qsm$branch,   treedata = qsm$treedata,   normalisation = \"dbh\" ) # with point cloud data for a buttressed tree pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") sbl <- stem_branch_length_qsm(   branch = qsm$branch, treedata = qsm$treedata,   normalisation = \"dbh\", pc = pc_tree,   buttress = TRUE ) # from Terryn et al. (2020) sbl <- stem_branch_length_qsm(   branch = qsm$branch, treedata = qsm$treedata,   normalisation = \"treeheight\" ) # with point cloud data pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") sbl <- stem_branch_length_qsm(   branch = qsm$branch, treedata = qsm$treedata,   normalisation = \"treeheight\", pc = pc_tree ) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_radius_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Stem branch radius TreeQSM — stem_branch_radius_qsm","title":"Stem branch radius TreeQSM — stem_branch_radius_qsm","text":"Calculates stem branch radius TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_radius_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stem branch radius TreeQSM — stem_branch_radius_qsm","text":"","code":"stem_branch_radius_qsm(   cylinder,   treedata,   normalisation = \"treeheight\",   pc = NA )"},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_radius_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stem branch radius TreeQSM — stem_branch_radius_qsm","text":"cylinder Cylinder field TreeQSM returned read_tree_qsm. treedata Treedata field TreeQSM returned read_tree_qsm. normalisation Can either \"treeheight\" \"parentcylinder\". case \"treeheight\" mean radius 10 biggest branches divided tree height (Terryn et al., 2020). case \"parentcylinder\" mean taken ratios radius 10 biggest branches radius parent cylinders (Akerblom et al., 2017). something different \"treeheight\" \"parentcylinder\" given, normalisation done. Default normalisation. pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. Default NA indicates tree point cloud available. relevant normalisation equals \"treeheight\".","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_radius_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stem branch radius TreeQSM — stem_branch_radius_qsm","text":"stem branch radius. Unitless normalisation, meters without normalisation.  NaN stem branches.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_radius_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stem branch radius TreeQSM — stem_branch_radius_qsm","text":"stem branch radius defined \"Mean 10 largest 1st order branches measured base. Can normalised tree height stem radius respective height\" (Akerblom et al., 2017 & Terryn et al., 2020). Tree height calculated tree_height.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_radius_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stem branch radius TreeQSM — stem_branch_radius_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_branch_radius_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stem branch radius TreeQSM — stem_branch_radius_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the stem branch radius # from Akerblom et al. (2017) qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") sbr <- stem_branch_radius_qsm(   cylinder = qsm$cylinder,   treedata = qsm$treedata,   normalisation = \"parentcyl\" ) # from Terryn et al. (2020) sbr <- stem_branch_radius_qsm(   cylinder = qsm$cylinder,   treedata = qsm$treedata,   normalisation = \"treeheight\" ) # with point cloud data pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") sbr <- stem_branch_radius_qsm(   cylinder = qsm$cylinder,   treedata = qsm$treedata,   normalisation = \"treeheight\",   pc = pc_tree ) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_tapering_pc.html","id":null,"dir":"Reference","previous_headings":"","what":"Tapering of a trunk point cloud — stem_tapering_pc","title":"Tapering of a trunk point cloud — stem_tapering_pc","text":"Calculates tapering trunk based linear regression diameters height trunk.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_tapering_pc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tapering of a trunk point cloud — stem_tapering_pc","text":"","code":"stem_tapering_pc(   pc,   slice_thickness = 0.1,   maxtaperheight = 10,   interval = 1,   buttress = FALSE,   thresholdbuttress = 0.0015,   maxbuttressheight = 5,   plot = FALSE )"},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_tapering_pc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tapering of a trunk point cloud — stem_tapering_pc","text":"pc trunk point cloud data.frame columns X,Y,Z. slice_thickness Numeric value (default = 0.1) determines thickness slice used measure diameter height. maxtaperheight Numeric value (default = 10) determines maximum height used tapering calculation. interval Numeric value (default = 1) determines interval median diameters taken reduce influence outliers taper measurement. Choose interval value equal slice_thickness want use calculated diameters. buttress Logical (default=FALSE), indicates trees buttresses (higher breast height). thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses. relevant buttress == TRUE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter breast height. relevant buttress == TRUE. plot Logical (default=FALSE), indicates taper curve plotted.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_tapering_pc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tapering of a trunk point cloud — stem_tapering_pc","text":"list tapering coefficients b, dataframe T diameters respective height, taper plot.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/stem_tapering_pc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tapering of a trunk point cloud — stem_tapering_pc","text":"","code":"if (FALSE) { # Read trunk point cloud pc_trunk <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") # calculate the tapering output <- stem_tapering_pc(pc_trunk) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_basic_pointcloud_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary basic structural metrics tree point cloud — summary_basic_pointcloud_metrics","title":"Summary basic structural metrics tree point cloud — summary_basic_pointcloud_metrics","text":"Returns summary data.frame containing tree position (X,Y-coordinates), tree height, diameter breast height, functional diameter breast height, diameter buttresses, functional diameter buttresses, projected (crown) area (crown) volume.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_basic_pointcloud_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary basic structural metrics tree point cloud — summary_basic_pointcloud_metrics","text":"","code":"summary_basic_pointcloud_metrics(   PCs_path,   extension = \".txt\",   dtm = NA,   r = 5,   crown = FALSE,   thresholdbranch = 1.5,   minheight = 1,   concavity = 2,   alpha = 1,   buttress = FALSE,   thresholdR2 = 0.001,   slice_thickness = 0.06,   thresholdbuttress = 0.001,   maxbuttressheight = 7,   OUT_path = FALSE,   plot = FALSE )"},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_basic_pointcloud_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary basic structural metrics tree point cloud — summary_basic_pointcloud_metrics","text":"PCs_path character path folder contains tree point clouds. extension character refering file extension point cloud files (default=\".txt\"). Can \".txt\", \".ply\" \".las\". relevant tree point clouds available. dtm digital terrain model tree_height_pc. r Numeric value (default=5) r determines range taken dtm tree_height_pc. relevant dtm provided. crown Logical (default=FALSE), indicates area volume calculated based full point clouds (crown = FALSE) crown point clouds (crown = TRUE). thresholdbranch Numeric value (default=1.5) classify_crown_pc. relevant crown == TRUE. minheight Numeric value (default=1) classify_crown_pc. default value based non-buttressed trees. Choose higher value (e.g. 4) buttressed trees. relevant crown == TRUE. concavity Numeric value (default=2). Parameter projected_area_pc function used calculate projected crown area. alpha Numeric value (default=1). Parameter alpha_volume_pc function used calculate crown volume. buttress Logical (default=FALSE), indicates trees buttresses (higher breast height). thresholdR2 Numeric value (default=0.001). Parameter dbh_pc function used calculate diameter breast height. relevant buttress == FALSE. slice_thickness Numeric value (default = 0.06). Parameter dbh_pc dab_pc functions used calculate diameter breast height buttresses. thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses. relevant buttress == TRUE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter buttresses. relevant buttress == TRUE. OUT_path character name output file (including path folder), summary csv file saved logical (default=FALSE) case csv file produced. plot Logical (default=FALSE), indicates summary figure tree point cloud plotted. OUT_path provided, figures saved OUT_path.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_basic_pointcloud_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary basic structural metrics tree point cloud — summary_basic_pointcloud_metrics","text":"summary basic structural metrics multiple tree point clouds data.frame. Includes tree height, diameter breast height, diameter buttresses, projected (crown) area (crown) volume. summary saved csv file output folder provided.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_basic_pointcloud_metrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary basic structural metrics tree point cloud — summary_basic_pointcloud_metrics","text":"tree position, tree height, diameter breast height, functional diameter breast height, diameter buttresses, functional diameter buttresses, projected (crown) area (crown) volume otained tree_position_pc, tree_height_pc, dbh_pc, dab_pc, projected_area_pc alpha_volume_pc respectively.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_basic_pointcloud_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary basic structural metrics tree point cloud — summary_basic_pointcloud_metrics","text":"","code":"if (FALSE) { # Calculate the summary with default parameters and export to csv summary <- summary_basic_pointcloud_metrics(   PCs_path = \"path/to/folder/PCs/\",   OUT_path = \"path/to/out/folder/\" ) # Calculate the summary with non-default parameter values # recommended for buttressed trees summary <- summary_basic_pointcloud_metrics(   PCs_path = \"path/to/folder/PCs/\",   extension = \".ply\", crown = TRUE,   minheight = 4, buttress = TRUE ) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_qsm_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary structural metrics from QSMs — summary_qsm_metrics","title":"Summary structural metrics from QSMs — summary_qsm_metrics","text":"Returns summary data.frame containing metrics defined Terryn et al. (2020). Also contains: X Y-position, dbh, tree height, tree volume trunk volume. tree point clouds provided, dbh tree height based point cloud instead QSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_qsm_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary structural metrics from QSMs — summary_qsm_metrics","text":"","code":"summary_qsm_metrics(   QSMs_path,   version = \"2.4.1\",   multiple = FALSE,   sbr_normalisation = \"treeheight\",   sbl_normalisation = \"treeheight\",   sbd_normalisation = \"no\",   PCs_path = NA,   extension = \".txt\",   buttress = FALSE,   thresholdR2 = 0.001,   slice_thickness = 0.06,   thresholdbuttress = 0.001,   maxbuttressheight = 7,   OUT_path = FALSE )"},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_qsm_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary structural metrics from QSMs — summary_qsm_metrics","text":"QSMs_path character path folder contains treeQSMs. files format xxx_qsm.mat (xxx unique tree id) xxx_qsm_0.mat (0 end example n-th QSM made tree xxx). Multiple QSMs can present one QSM file, case set parameter multiple TRUE. multiple QSMs present one tree mean values different QSMs taken tree final value certain feature. version character indicating version TreeQSM used produce QSMs (Default = \"2.4.1\"). possible versions \"2.4.0\", \"2.0\", \"2.3.0\", \"2.3.1\" \"2.3.2\". multiple Logical (default = FALSE), indicates single .mat file one tree holds multiple QSMs . sbr_normalisation Character (default=\"treeheight\"). Normalisation parameter stem_branch_radius_qsm. sbl_normalisation Character (default=\"treeheight\"). Normalisation parameter stem_branch_length_qsm. sbd_normalisation Character (default=\"\"). Normalisation parameter stem_branch_distance_qsm. PCs_path character path folder contains tree point clouds. Default NA point clouds available. point clouds used determine DBH, tree height, projected crown area crown volume. DBH tree height obtained tree point clouds used normalisation features. point cloud files format xxx_pc order link tree point cloud ' respective treeQSM. extension character refering file extension point cloud files (default=\".txt\"). Can \".txt\", \".ply\" \".las\". relevant tree point clouds available. buttress Logical (default=FALSE), indicates trees buttresses. relevant tree point clouds available. relevant tree point clouds available. thresholdR2 Numeric value (default=0.001). Parameter dbh_pc function used calculate diameter breast height. relevant tree point cloud available buttress == FALSE. slice_thickness Numeric value (default = 0.06). Parameter dbh_pc dab_pc functions used calculate diameter breast height buttresses. relevant tree point cloud available. thresholdbuttress Numeric value (default=0.001). Parameter dab_pc function used calculate diameter buttresses. relevant tree point clouds available buttress == TRUE. maxbuttressheight Numeric value (default=7). Parameter dab_pc function used calculate diameter buttresses. relevant tree point clouds available buttress == TRUE. OUT_path character name output file (including path folder), summary csv file saved logical (default=FALSE) case csv file produced.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_qsm_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary structural metrics from QSMs — summary_qsm_metrics","text":"summary metrics Terryn et al. (2020) data.frame. summary saved csv file output folder provided. multiple QSMs provided trees mean values standard deviations tree also calculated saved 2 csv files. case function returns list summaries means standard deviations second third element list respectively.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_qsm_metrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary structural metrics from QSMs — summary_qsm_metrics","text":"Metrics Terryn et al. (2020): stem branch angle (sba, stem_branch_angle_qsm), stem branch cluster size (sbcs, stem_branch_cluster_size_qsm), stem branch radius (sbr, stem_branch_radius_qsm), stem branch length (sbl, stem_branch_length_qsm), stem branch distance (sbd, stem_branch_distance_qsm), dbh height ratio (dhr, dbh_height_ratio_qsm), dbh volume ratio (dvr, dbh_volume_ratio_qsm), volume 55 (vb55, volume_below_55_qsm), cylinder length volume ratio (clvr, cylinder_length_volume_ratio_qsm), shedding ratio (sr, shedding_ratio_qsm), branch angle ratio (bar, branch_angle_ratio_qsm), relative volume ratio (rvr, relative_volume_ratio_qsm), crown start height (csh, crown_start_height_qsm), crown height (ch, crown_height_qsm), crown evenness (ce, crown_evenness_qsm), crown diameter height ratio (cdhr, crown_diameterheight_ratio_qsm), dbh minimum radius ratio (dmr, dbh_minradius_ratio_qsm).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_qsm_metrics.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Summary structural metrics from QSMs — summary_qsm_metrics","text":"Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/summary_qsm_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary structural metrics from QSMs — summary_qsm_metrics","text":"","code":"if (FALSE) { # Calculate the summary with default parameters and export to csv # recommended for non-buttressed trees summary <- summary_qsm_metrics(   QSMs_path = \"path/to/folder/QSMs/\",   OUT_path = \"path/to/out/folder/\" ) # also using point cloud info summary <- summary_qsm_metrics(   QSMs_path = \"path/to/folder/QSMs/\",   PCs_path = \"path/to/folder/PCs/\",   extension = \".txt\",   OUT_path = \"path/to/out/folder/\" ) # Calculate the summary with non-default parameter values # recommended for buttressed trees summary <- summary_qsm_metrics(   QSMs_path = \"path/to/folder/QSMs/\",   PCs_path = \"path/to/folder/PCs/\",   extension = \".txt\", buttress = TRUE,   OUT_path = \"path/to/out/folder/\" ) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/total_branch_length_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Total branch length TreeQSM — total_branch_length_qsm","title":"Total branch length TreeQSM — total_branch_length_qsm","text":"Extracts total branch length treedata TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/total_branch_length_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total branch length TreeQSM — total_branch_length_qsm","text":"","code":"total_branch_length_qsm(treedata)"},{"path":"https://lmterryn.github.io/ITSMe/reference/total_branch_length_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total branch length TreeQSM — total_branch_length_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/total_branch_length_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total branch length TreeQSM — total_branch_length_qsm","text":"total branch length TreeQSM liters.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/total_branch_length_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total branch length TreeQSM — total_branch_length_qsm","text":"","code":"if (FALSE) { # Read tree qsm and extract total branch length qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") branchlen <- total_branch_length_qsm(treedata = qsm$treedata) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/total_branch_volume_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Total branch volume TreeQSM — total_branch_volume_qsm","title":"Total branch volume TreeQSM — total_branch_volume_qsm","text":"Extracts total branch volume treedata TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/total_branch_volume_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total branch volume TreeQSM — total_branch_volume_qsm","text":"","code":"total_branch_volume_qsm(treedata)"},{"path":"https://lmterryn.github.io/ITSMe/reference/total_branch_volume_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total branch volume TreeQSM — total_branch_volume_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/total_branch_volume_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total branch volume TreeQSM — total_branch_volume_qsm","text":"total branch volume TreeQSM liters.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/total_branch_volume_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total branch volume TreeQSM — total_branch_volume_qsm","text":"","code":"if (FALSE) { # Read tree qsm and extract total branch volume qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") branchvol <- total_branch_volume_qsm(treedata = qsm$treedata) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/total_cyl_length_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Total cylinder length TreeQSM — total_cyl_length_qsm","title":"Total cylinder length TreeQSM — total_cyl_length_qsm","text":"Extracts total cylinder length treedata TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/total_cyl_length_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total cylinder length TreeQSM — total_cyl_length_qsm","text":"","code":"total_cyl_length_qsm(treedata)"},{"path":"https://lmterryn.github.io/ITSMe/reference/total_cyl_length_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total cylinder length TreeQSM — total_cyl_length_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/total_cyl_length_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total cylinder length TreeQSM — total_cyl_length_qsm","text":"total length cylinders (branch trunk) TreeQSM meters.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/total_cyl_length_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total cylinder length TreeQSM — total_cyl_length_qsm","text":"","code":"if (FALSE) { # Read tree qsm and extract total cylinder length qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") tot_len <- total_cyl_length_qsm(treedata = qsm$treedata) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height.html","id":null,"dir":"Reference","previous_headings":"","what":"Tree height — tree_height","title":"Tree height — tree_height","text":"Returns tree height.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tree height — tree_height","text":"","code":"tree_height(treedata, pc = NA)"},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tree height — tree_height","text":"treedata Treedata field TreeQSM returned read_tree_qsm. pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. point cloud available NA used input (default=NA).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tree height — tree_height","text":"tree height meters.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tree height — tree_height","text":"tree point cloud available tree_height calculation based point cloud (accurate) tree_height_pc. tree point cloud available tree height based treeQSM tree_height_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tree height — tree_height","text":"","code":"if (FALSE) { qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") h <- tree_height(treedata = qsm$treedata) pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") h <- tree_height(treedata = qsm$treedata, pc = pc_tree) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height_pc.html","id":null,"dir":"Reference","previous_headings":"","what":"Tree height point cloud — tree_height_pc","title":"Tree height point cloud — tree_height_pc","text":"Returns tree height measured tree point cloud. digital terrain model (dtm) provided used estimate tree height.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height_pc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tree height point cloud — tree_height_pc","text":"","code":"tree_height_pc(pc, dtm = NA, r = 5, plot = FALSE)"},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height_pc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tree height point cloud — tree_height_pc","text":"pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc. dtm digital terrain model data.frame columns X,Y,Z (default = NA). digital terrain model format point cloud can also read read_tree_pc. r Numeric value (default=5) r determines range taken dtm. least resolution dtm. relevant dtm provided. plot Logical (default=FALSE), indicates tree point cloud plotted.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height_pc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tree height point cloud — tree_height_pc","text":"tree height (numeric value). Also optionally (plot=TRUE) plots tree point cloud case returns list tree height first element plot second element.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height_pc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tree height point cloud — tree_height_pc","text":"tree height measured difference Z-value highest lowest point tree point cloud. lowest point tree point cloud sometimes sampled (e.g. low density UAV-LS, dense forests). case, dtm can provided used estimate lowest point: height dtm tree point cloud, calculated median Z-value digital terrain model points within horizontal (x,y-)range (r) 10 lowest points tree point cloud.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height_pc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tree height point cloud — tree_height_pc","text":"","code":"if (FALSE) { # Read tree point cloud and calculate the tree height pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") tree_height <- tree_height_pc(pc = pc_tree) # Read the digital terrain model dtm <- read_tree_pc(PC_path = \"path/to/dtm.txt\") # Calculate the tree height based on the point cloud and dtm tree_height <- tree_height_pc(pc = pc_tree, dtm = dtm, r = 1) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Tree height TreeQSM — tree_height_qsm","title":"Tree height TreeQSM — tree_height_qsm","text":"Extracts tree height treedata TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tree height TreeQSM — tree_height_qsm","text":"","code":"tree_height_qsm(treedata)"},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tree height TreeQSM — tree_height_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tree height TreeQSM — tree_height_qsm","text":"tree height TreeQSM meters.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_height_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tree height TreeQSM — tree_height_qsm","text":"","code":"if (FALSE) { # Read tree qsm and extract tree height qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") height <- tree_height_qsm(treedata = qsm$treedata) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_position_pc.html","id":null,"dir":"Reference","previous_headings":"","what":"Tree point cloud position — tree_position_pc","title":"Tree point cloud position — tree_position_pc","text":"Returns (X,Y,Z)-position tree point cloud based mean X, Y Z value 100 lowest points tree point cloud.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_position_pc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tree point cloud position — tree_position_pc","text":"","code":"tree_position_pc(pc)"},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_position_pc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tree point cloud position — tree_position_pc","text":"pc tree point cloud data.frame columns X,Y,Z. Output read_tree_pc.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_position_pc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tree point cloud position — tree_position_pc","text":"Numeric X, Y, Z coordinates (location) tree stem.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_position_pc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tree point cloud position — tree_position_pc","text":"","code":"if (FALSE) { # Read tree point cloud and calculate the tree position pc_tree <- read_tree_pc(PC_path = \"path/to/point_cloud.txt\") pos <- tree_position_pc(pc = pc_tree) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_position_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"TreeQSM position — tree_position_qsm","title":"TreeQSM position — tree_position_qsm","text":"Returns (X,Y)-position treeQSM based start position first cylinder higher 1.3 m ground.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_position_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TreeQSM position — tree_position_qsm","text":"","code":"tree_position_qsm(cylinder)"},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_position_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TreeQSM position — tree_position_qsm","text":"cylinder Cylinder field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_position_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TreeQSM position — tree_position_qsm","text":"Numeric XY coordinates (location) tree stem.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_position_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TreeQSM position — tree_position_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate tree position qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") pos <- tree_position_qsm(cylinder = qsm$cylinder) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_volume_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Total tree volume TreeQSM — tree_volume_qsm","title":"Total tree volume TreeQSM — tree_volume_qsm","text":"Extracts total tree volume treedata TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_volume_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total tree volume TreeQSM — tree_volume_qsm","text":"","code":"tree_volume_qsm(treedata, cylinder = NA, cylindercutoff = 0)"},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_volume_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total tree volume TreeQSM — tree_volume_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm. cylinder Cylinder field TreeQSM returned read_tree_qsm, (default = NA - need cylinder cylindercutoff == 0). cylindercutoff cutoff radius meters cylinders included volume calculation.Default 0 includes cylinders.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_volume_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total tree volume TreeQSM — tree_volume_qsm","text":"total volume TreeQSM liters. trunk modeled triangulation total volume sum triangulated volume stem (bottom), volume stem cylinder (top) volume branch cylinders.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/tree_volume_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total tree volume TreeQSM — tree_volume_qsm","text":"","code":"if (FALSE) { # Read tree qsm and extract tree volume qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") tot_vol <- tree_volume_qsm(treedata = qsm$treedata) # Only include cylinders larger than 2.5 cm in radius tot_vol <- tree_volume_qsm(treedata = qsm$treedata, cylinder = qsm$cylinder,                            cylindercutoff = 0.25) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/trunk_volume_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Total trunk volume TreeQSM — trunk_volume_qsm","title":"Total trunk volume TreeQSM — trunk_volume_qsm","text":"Extracts total trunk volume treedata TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/trunk_volume_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Total trunk volume TreeQSM — trunk_volume_qsm","text":"","code":"trunk_volume_qsm(treedata)"},{"path":"https://lmterryn.github.io/ITSMe/reference/trunk_volume_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Total trunk volume TreeQSM — trunk_volume_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/trunk_volume_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Total trunk volume TreeQSM — trunk_volume_qsm","text":"total trunk volume TreeQSM liters. trunk modelled triangulation total volume sum triangulated volume stem (bottom) volume stem cylinder (top).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/trunk_volume_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Total trunk volume TreeQSM — trunk_volume_qsm","text":"","code":"if (FALSE) { # Read tree qsm and extract trunk volume qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") trunkvol <- trunk_volume_qsm(treedata = qsm$treedata) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/vertical_bin_radii_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Radii vertical bins TreeQSM — vertical_bin_radii_qsm","title":"Radii vertical bins TreeQSM — vertical_bin_radii_qsm","text":"Calculates radii three vertical bins fitted TreeQSM cylinders.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/vertical_bin_radii_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Radii vertical bins TreeQSM — vertical_bin_radii_qsm","text":"","code":"vertical_bin_radii_qsm(treedata, cylinder)"},{"path":"https://lmterryn.github.io/ITSMe/reference/vertical_bin_radii_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Radii vertical bins TreeQSM — vertical_bin_radii_qsm","text":"treedata Treedata field TreeQSM returned read_tree_qsm. cylinder Cylinder field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/vertical_bin_radii_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Radii vertical bins TreeQSM — vertical_bin_radii_qsm","text":"radii three vertical bins.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/vertical_bin_radii_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Radii vertical bins TreeQSM — vertical_bin_radii_qsm","text":"radii radii cylinders whose axis vertical goes bin centre point, contains approximately 90% volume branch cylinders bin. tree divided three vertical bins, centre point bin defined average mean points stem cylinders bin. bin contain stem cylinders centre previous bin used (Akerblom et al., 2017 & Terryn et al., 2020).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/vertical_bin_radii_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Radii vertical bins TreeQSM — vertical_bin_radii_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/vertical_bin_radii_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Radii vertical bins TreeQSM — vertical_bin_radii_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the vertical bin radii qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") radii <- vertical_bin_radii_qsm(   treedata = qsm$treedata,   cylinder = qsm$cylinder ) }"},{"path":"https://lmterryn.github.io/ITSMe/reference/volume_below_55_qsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Volume below 55 TreeQSM — volume_below_55_qsm","title":"Volume below 55 TreeQSM — volume_below_55_qsm","text":"Calculates volume 55% TreeQSM.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/volume_below_55_qsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Volume below 55 TreeQSM — volume_below_55_qsm","text":"","code":"volume_below_55_qsm(cylinder, treedata)"},{"path":"https://lmterryn.github.io/ITSMe/reference/volume_below_55_qsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Volume below 55 TreeQSM — volume_below_55_qsm","text":"cylinder Cylinder field TreeQSM returned read_tree_qsm. treedata Treedata field TreeQSM returned read_tree_qsm.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/volume_below_55_qsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Volume below 55 TreeQSM — volume_below_55_qsm","text":"volume 55.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/volume_below_55_qsm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Volume below 55 TreeQSM — volume_below_55_qsm","text":"volume 55 defined \"relative branch volume 55% tree height\" (Akerblom et al., 2017 & Terryn et al., 2020).","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/volume_below_55_qsm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Volume below 55 TreeQSM — volume_below_55_qsm","text":"Akerblom, M., Raumonen, P., Makipaa, R., & Kaasalainen, M. (2017). Automatic tree species recognition quantitative structure models. Remote Sensing Environment, 191, 1-12. Terryn, L., Calders, K., Disney, M., Origo, N., Malhi, Y., Newnham, G., ... & Verbeeck, H. (2020). Tree species classification using structural features derived terrestrial laser scanning. ISPRS Journal Photogrammetry Remote Sensing, 168, 170-181.","code":""},{"path":"https://lmterryn.github.io/ITSMe/reference/volume_below_55_qsm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Volume below 55 TreeQSM — volume_below_55_qsm","text":"","code":"if (FALSE) { # Read tree qsm and calculate the volume below 55 qsm <- read_tree_qsm(QSM_path = \"path/to/qsm.mat\") vol_55 <- volume_below_55_qsm(   cylinder = qsm$cylinder,   treedata = qsm$treedata ) }"}]
